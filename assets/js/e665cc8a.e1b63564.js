"use strict";(self.webpackChunkbacalhau_docs=self.webpackChunkbacalhau_docs||[]).push([[7469],{8:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var t=i(5893),a=i(1151);const r={sidebar_label:"Python Custom Container",sidebar_position:5},s="Building and Running Custom Python  Container",o={id:"examples/workload-onboarding/Python-Custom-Container/index",title:"Building and Running Custom Python  Container",description:"stars - badge-generator",source:"@site/docs/examples/workload-onboarding/Python-Custom-Container/index.md",sourceDirName:"examples/workload-onboarding/Python-Custom-Container",slug:"/examples/workload-onboarding/Python-Custom-Container/",permalink:"/examples/workload-onboarding/Python-Custom-Container/",draft:!1,unlisted:!1,editUrl:"https://github.com/bacalhau-project/docs.bacalhau.org/blob/main/docs/examples/workload-onboarding/Python-Custom-Container/index.md",tags:[],version:"current",lastUpdatedAt:1702038777,formattedLastUpdatedAt:"Dec 8, 2023",sidebarPosition:5,frontMatter:{sidebar_label:"Python Custom Container",sidebar_position:5},sidebar:"documentationSidebar",previous:{title:"Prolog Script",permalink:"/examples/workload-onboarding/Prolog-Hello-World/"},next:{title:"Python Pandas",permalink:"/examples/workload-onboarding/python-pandas/"}},l={},d=[{value:"<strong>Introduction</strong>",id:"introduction",level:2},{value:"TD;LR",id:"tdlr",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Sample Recommendation Dataset",id:"sample-recommendation-dataset",level:2},{value:"Downloading the dataset",id:"downloading-the-dataset",level:3},{value:"Installing Dependencies",id:"installing-dependencies",level:3},{value:"Writing the Script",id:"writing-the-script",level:3},{value:"Running the Script",id:"running-the-script",level:3},{value:"Setting Up Docker",id:"setting-up-docker",level:2},{value:"Build the container",id:"build-the-container",level:3},{value:"Push the container",id:"push-the-container",level:3},{value:"Running a Bacalhau Job",id:"running-a-bacalhau-job",level:2},{value:"Running the Container with Default Parameters",id:"running-the-container-with-default-parameters",level:3},{value:"Structure of the command",id:"structure-of-the-command",level:3},{value:"Running the Container with Custom Parameters",id:"running-the-container-with-custom-parameters",level:3},{value:"Structure of the command",id:"structure-of-the-command-1",level:3},{value:"Checking the State of your Jobs",id:"checking-the-state-of-your-jobs",level:2},{value:"Viewing your Job Output",id:"viewing-your-job-output",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"building-and-running-custom-python--container",children:"Building and Running Custom Python  Container"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://github.com/bacalhau-project/bacalhau",children:(0,t.jsx)(n.img,{src:"https://img.shields.io/github/stars/bacalhau-project/bacalhau?style=social",alt:"stars - badge-generator"})})}),"\n",(0,t.jsx)(n.h2,{id:"introduction",children:(0,t.jsx)(n.strong,{children:"Introduction"})}),"\n",(0,t.jsx)(n.p,{children:"In this tutorial example, we will walk you through building your own docker container and running the container on the bacalhau network."}),"\n",(0,t.jsx)(n.h2,{id:"tdlr",children:"TD;LR"}),"\n",(0,t.jsx)(n.p,{children:"Running a Python container on Bacalhau"}),"\n",(0,t.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsxs)(n.p,{children:["To get started, you need to install the Bacalhau client, see more information ",(0,t.jsx)(n.a,{href:"https://docs.bacalhau.org/getting-started/installation",children:"here"})]}),"\n",(0,t.jsx)(n.h2,{id:"sample-recommendation-dataset",children:"Sample Recommendation Dataset"}),"\n",(0,t.jsx)(n.p,{children:"We will be using a simple recommendation script that when given a movie ID will recommend other movies based on user ratings. Assuming you want if recommendations for the movie Toy Story (1995) it will recommend movies from similar categories:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Recommendations for Toy Story (1995):\n1  :  Toy Story (1995)\n58  :  Postino, Il (The Postman) (1994)\n3159  :  Fantasia 2000 (1999)\n359  :  I Like It Like That (1994)\n756  :  Carmen Miranda: Bananas Is My Business (1994)\n618  :  Two Much (1996)\n48  :  Pocahontas (1995)\n2695  :  Boys, The (1997)\n2923  :  Citizen's Band (a.k.a. Handle with Care) (1977)\n688  :  Operation Dumbo Drop (1995)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"downloading-the-dataset",children:"Downloading the dataset"}),"\n",(0,t.jsxs)(n.p,{children:["Download Movielens1M dataset from this link ",(0,t.jsx)(n.a,{href:"https://files.grouplens.org/datasets/movielens/ml-1m.zip",children:"https://files.grouplens.org/datasets/movielens/ml-1m.zip"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"!wget https://files.grouplens.org/datasets/movielens/ml-1m.zip\n"})}),"\n",(0,t.jsx)(n.p,{children:"In this example, we\u2019ll be using 2 files from the MovieLens 1M dataset: ratings.dat and movies.dat. After the dataset is downloaded extract the zip and place ratings.dat and movies.dat into a folder called input"}),"\n",(0,t.jsx)(n.p,{children:"The structure of the input directory should be"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"input\n\u251c\u2500\u2500 movies.dat\n\u2514\u2500\u2500 ratings.dat\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Extracting the downloaded zip file\n!unzip ml-1m.zip\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"#moving  ratings.dat and movies.dat into a folder called 'input'\n!mkdir input; mv ml-1m/movies.dat ml-1m/ratings.dat input/\n"})}),"\n",(0,t.jsx)(n.h3,{id:"installing-dependencies",children:"Installing Dependencies"}),"\n",(0,t.jsxs)(n.p,{children:["Create a ",(0,t.jsx)(n.code,{children:"requirements.txt"})," for the Python libraries we\u2019ll be using:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"%%writefile requirements.txt\nnumpy\npandas\n"})}),"\n",(0,t.jsx)(n.p,{children:"To install the dependencies run the command"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"%%bash\npip install -r requirements.txt\n"})}),"\n",(0,t.jsx)(n.h3,{id:"writing-the-script",children:"Writing the Script"}),"\n",(0,t.jsxs)(n.p,{children:["Create a new file called ",(0,t.jsx)(n.code,{children:"similar-movies.py"})," and in it paste the following script"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"%%writefile similar-movies.py\n# Imports\nimport numpy as np\nimport pandas as pd\nimport argparse\nfrom distutils.dir_util import mkpath\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# Read the files with pandas\ndata = pd.io.parsers.read_csv('input/ratings.dat',\nnames=['user_id', 'movie_id', 'rating', 'time'],\nengine='python', delimiter='::', encoding='latin-1')\nmovie_data = pd.io.parsers.read_csv('input/movies.dat',\nnames=['movie_id', 'title', 'genre'],\nengine='python', delimiter='::', encoding='latin-1')\n\n# Create the ratings matrix of shape (m\xd7u) with rows as movies and columns as users\n\nratings_mat = np.ndarray(\nshape=((np.max(data.movie_id.values)), np.max(data.user_id.values)),\ndtype=np.uint8)\nratings_mat[data.movie_id.values-1, data.user_id.values-1] = data.rating.values\n\n# Normalise matrix (subtract mean off)\n\nnormalised_mat = ratings_mat - np.asarray([(np.mean(ratings_mat, 1))]).T\n\n# Compute SVD\n\nnormalised_mat = ratings_mat - np.matrix(np.mean(ratings_mat, 1)).T\ncov_mat = np.cov(normalised_mat)\nevals, evecs = np.linalg.eig(cov_mat)\n\n# Calculate cosine similarity, sort by most similar, and return the top N.\n\ndef top_cosine_similarity(data, movie_id, top_n=10):\n   \nindex = movie_id - 1\n# Movie id starts from 1\n   \nmovie_row = data[index, :]\nmagnitude = np.sqrt(np.einsum('ij, ij -> i', data, data))\nsimilarity = np.dot(movie_row, data.T) / (magnitude[index] * magnitude)\nsort_indexes = np.argsort(-similarity)\nreturn sort_indexes[:top_n]\n\n# Helper function to print top N similar movies\ndef print_similar_movies(movie_data, movie_id, top_indexes):\nprint('Recommendations for {0}: \\n'.format(\nmovie_data[movie_data.movie_id == movie_id].title.values[0]))\nfor id in top_indexes + 1:\nprint(str(id),' : ',movie_data[movie_data.movie_id == id].title.values[0])\n\n\nparser = argparse.ArgumentParser(description='Personal information')\nparser.add_argument('--k', dest='k', type=int, help='principal components to represent the movies',default=50)\nparser.add_argument('--id', dest='id', type=int, help='Id of the movie',default=1)\nparser.add_argument('--n', dest='n', type=int, help='No of recommendations',default=10)\n\nargs = parser.parse_args()\nk = args.k\nmovie_id = args.id # Grab an id from movies.dat\ntop_n = args.n\n\n# k = 50\n# # Grab an id from movies.dat\n# movie_id = 1\n# top_n = 10\n\nsliced = evecs[:, :k] # representative data\ntop_indexes = top_cosine_similarity(sliced, movie_id, top_n)\nprint_similar_movies(movie_data, movie_id, top_indexes)\n"})}),"\n",(0,t.jsx)(n.p,{children:"What the similar-movies.py script does"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Read the files with pandas"}),"\n",(0,t.jsx)(n.li,{children:"Create the ratings matrix of shape (m\xd7u) with rows as movies and columns as user"}),"\n",(0,t.jsx)(n.li,{children:"Normalise matrix (subtract mean off)"}),"\n",(0,t.jsx)(n.li,{children:"Compute SVD"}),"\n",(0,t.jsx)(n.li,{children:"Calculate cosine similarity, sort by most similar, and return the top N."}),"\n",(0,t.jsx)(n.li,{children:"Select k principal components to represent the movies, a movie_id to find recommendations, and print the top_n results."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["For further reading on how the script works, go to ",(0,t.jsx)(n.a,{href:"https://alyssaq.github.io/2015/20150426-simple-movie-recommender-using-svd/",children:"Simple Movie Recommender Using SVD | Alyssa"})]}),"\n",(0,t.jsx)(n.h3,{id:"running-the-script",children:"Running the Script"}),"\n",(0,t.jsx)(n.p,{children:"Running the script similar-movies.py using the default values you can also use other flags to set your own values"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"! python similar-movies.py\n"})}),"\n",(0,t.jsx)(n.h2,{id:"setting-up-docker",children:"Setting Up Docker"}),"\n",(0,t.jsxs)(n.p,{children:["We will create a  ",(0,t.jsx)(n.code,{children:"Dockerfile"})," and add the desired configuration to the file. These commands specify how the image will be built, and what extra requirements will be included."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"%%writefile Dockerfile\nFROM python:3.8\nADD similar-movies.py .\nADD /input input\nCOPY ./requirements.txt /requirements.txt\nRUN pip install -r requirements.txt\n"})}),"\n",(0,t.jsxs)(n.p,{children:["We will use the python:3.8 docker image and add our script ",(0,t.jsx)(n.code,{children:"similar-movies.py"})," to copy the script to the docker image, similarly, we also add the dataset directory and also the requirements, after that run the command to install the dependencies in the image"]}),"\n",(0,t.jsx)(n.p,{children:"The final folder structure will look like this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 input\n\u2502   \u251c\u2500\u2500 movies.dat\n\u2502   \u2514\u2500\u2500 ratings.dat\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 similar-movies.py\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["See more information on how to containerize your script/app ",(0,t.jsx)(n.a,{href:"https://docs.docker.com/get-started/02_our_app/",children:"here"})]})}),"\n",(0,t.jsx)(n.h3,{id:"build-the-container",children:"Build the container"}),"\n",(0,t.jsxs)(n.p,{children:["We will run ",(0,t.jsx)(n.code,{children:"docker build"})," command to build the container;"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"docker build -t <hub-user>/<repo-name>:<tag> .\n"})}),"\n",(0,t.jsx)(n.p,{children:"Before running the command replace;"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"hub-user"})," with your docker hub username, If you don\u2019t have a docker hub account ",(0,t.jsx)(n.a,{href:"https://docs.docker.com/docker-id/",children:"follow these instructions to create docker account"}),", and use the username of the account you created"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"repo-name"})," with the name of the container, you can name it anything you want"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"tag"})," this is not required but you can use the latest tag"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"In our case"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker build -t jsace/python-similar-movies\n"})}),"\n",(0,t.jsx)(n.h3,{id:"push-the-container",children:"Push the container"}),"\n",(0,t.jsx)(n.p,{children:"Next, upload the image to the registry. This can be done by using the Docker hub username, repo name or tag."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"docker push <hub-user>/<repo-name>:<tag>\n"})}),"\n",(0,t.jsx)(n.p,{children:"In our case"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker push jsace/python-similar-movies\n"})}),"\n",(0,t.jsx)(n.h2,{id:"running-a-bacalhau-job",children:"Running a Bacalhau Job"}),"\n",(0,t.jsx)(n.p,{children:"After the repo image has been pushed to Docker Hub, we can now use the container for running on Bacalhau. You can submit a Bacalhau job using by running your container on Bacalhau with default or custom parameters"}),"\n",(0,t.jsx)(n.h3,{id:"running-the-container-with-default-parameters",children:"Running the Container with Default Parameters"}),"\n",(0,t.jsx)(n.p,{children:"To submit a Bacalhau job by running your container on Bacalhau with default parameters, run the following Bacalhau command:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"%%bash --out job_id\nbacalhau docker run \\\n--id-only \\\n--wait \\\njsace/python-similar-movies \\\n-- python similar-movies.py\n"})}),"\n",(0,t.jsx)(n.h3,{id:"structure-of-the-command",children:"Structure of the command"}),"\n",(0,t.jsx)(n.p,{children:"Let's look closely at the command above:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"bacalhau docker run"}),": call to bacalhau"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"jsace/python-similar-movies"}),": the name and the tag of the docker image we are using"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"-- python similar-movies.py"}),": execute the Python script"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["When a job is submitted, Bacalhau prints out the related ",(0,t.jsx)(n.code,{children:"job_id"}),". We store that in an environment variable so that we can reuse it later on."]}),"\n",(0,t.jsx)(n.h3,{id:"running-the-container-with-custom-parameters",children:"Running the Container with Custom Parameters"}),"\n",(0,t.jsx)(n.p,{children:"To submit a Bacalhau job by running your container on Bacalhau with custom parameters, run the following Bacalhau command:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"bacalhau docker run \\\njsace/python-similar-movies \\\n-- python similar-movies.py --k 50 --id 10 --n 10\n"})}),"\n",(0,t.jsx)(n.h3,{id:"structure-of-the-command-1",children:"Structure of the command"}),"\n",(0,t.jsx)(n.p,{children:"Let's look closely at the command above:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"bacalhau docker run"}),": call to bacalhau"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"jsace/python-similar-movies"}),": the name and the tag of the docker image we are using"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"-- python similar-movies.py --k 50 --id 10 --n 10"}),": execute the python script"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"checking-the-state-of-your-jobs",children:"Checking the State of your Jobs"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Job status"}),": You can check the status of the job using ",(0,t.jsx)(n.code,{children:"bacalhau list"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"%%bash\nbacalhau list --id-filter ${JOB_ID}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["When it says ",(0,t.jsx)(n.code,{children:"Published"})," or ",(0,t.jsx)(n.code,{children:"Completed"}),", that means the job is done, and we can get the results."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Job information"}),": You can find out more information about your job by using ",(0,t.jsx)(n.code,{children:"bacalhau describe"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"%%bash\nbacalhau describe ${JOB_ID}\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Job download"}),": You can download your job results directly by using ",(0,t.jsx)(n.code,{children:"bacalhau get"}),". Alternatively, you can choose to create a directory to store your results. In the command below, we created a directory and downloaded our job output to be stored in that directory."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"%%bash\nrm -rf results && mkdir -p results\nbacalhau get $JOB_ID --output-dir results\n"})}),"\n",(0,t.jsx)(n.h2,{id:"viewing-your-job-output",children:"Viewing your Job Output"}),"\n",(0,t.jsx)(n.p,{children:"To view the file, run the following command:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"!cat results/stdout # displays the contents of the file\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>o,a:()=>s});var t=i(7294);const a={},r=t.createContext(a);function s(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);