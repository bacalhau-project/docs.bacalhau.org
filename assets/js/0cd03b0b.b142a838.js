"use strict";(self.webpackChunkbacalhau_docs=self.webpackChunkbacalhau_docs||[]).push([[5381],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=a.createContext({}),u=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(n),h=o,m=d["".concat(i,".").concat(h)]||d[h]||c[h]||r;return n?a.createElement(m,l(l({ref:t},p),{},{components:n})):a.createElement(m,l({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:o,l[1]=s;for(var u=2;u<r;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},487:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>u});var a=n(7462),o=(n(7294),n(3905));const r={},l="Coresets On Bacalhau",s={unversionedId:"examples/miscellaneous/Coreset/index",id:"examples/miscellaneous/Coreset/index",title:"Coresets On Bacalhau",description:"Open In Colab",source:"@site/docs/examples/miscellaneous/Coreset/index.md",sourceDirName:"examples/miscellaneous/Coreset",slug:"/examples/miscellaneous/Coreset/",permalink:"/examples/miscellaneous/Coreset/",draft:!1,editUrl:"https://github.com/bacalhau-project/docs.bacalhau.org/blob/main/docs/examples/miscellaneous/Coreset/index.md",tags:[],version:"current",lastUpdatedAt:1675457528,formattedLastUpdatedAt:"Feb 3, 2023",frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Running BIDS Apps on bacalhau",permalink:"/examples/miscellaneous/BIDS/"},next:{title:"Running Genomics on bacalhau",permalink:"/examples/miscellaneous/Genomics/"}},i={},u=[{value:"<strong>Introduction</strong>",id:"introduction",level:2},{value:"<strong>Running Locally</strong>",id:"running-locally",level:2},{value:"Running on Bacalhau",id:"running-on-bacalhau",level:2},{value:"VIEWING THE OUTPUT CSV FILES",id:"viewing-the-output-csv-files",level:3}],p={toc:u};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"coresets-on-bacalhau"},"Coresets On Bacalhau"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://colab.research.google.com/github/bacalhau-project/examples/blob/main/Coreset/BIDS/index.ipynb"},(0,o.kt)("img",{parentName:"a",src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Colab"})),"\n",(0,o.kt)("a",{parentName:"p",href:"https://mybinder.org/v2/gh/bacalhau-project/examples/HEAD?labpath=miscellaneous/Coreset/index.ipynb"},(0,o.kt)("img",{parentName:"a",src:"https://mybinder.org/badge.svg",alt:"Open In Binder"}))),(0,o.kt)("h2",{id:"introduction"},(0,o.kt)("strong",{parentName:"h2"},"Introduction")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://arxiv.org/abs/2011.09384"},"Coreset "),"is a data subsetting method, Since the uncompressed datasets involved can get very big when compressed it becomes much harder to train them as training time increases with the dataset size, to reduce the training time to save costs we use the coreset method the coreset method can also be applied to other datasets"),(0,o.kt)("p",null,"Coresets similar functionality as same as the whole dataset"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://i.imgur.com/AQDLMXn.png",alt:null})),(0,o.kt)("p",null,"In this case, we use the coreset method which can lead to a fast speed in solving the k-means problem among the big data with high accuracy in the meantime."),(0,o.kt)("p",null,"We construct a small coreset for arbitrary shapes of numerical data with a decent time cost. The implementation was mainly based on the coreset construction algorithm that was proposed by Braverman et al. (SODA 2021)."),(0,o.kt)("h2",{id:"running-locally"},(0,o.kt)("strong",{parentName:"h2"},"Running Locally")),(0,o.kt)("p",null,"Clone the repo which contains the code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/js-ts/Coreset\n")),(0,o.kt)("p",null,"Downloading the dataset"),(0,o.kt)("p",null,"Open Street Map, which is a public repository that aims to generate and distribute accessible geographic data for the whole world. Basically, it supplies detailed position information, including the longitude and latitude of the places around the world. "),(0,o.kt)("p",null," The dataset is a osm.pbf (compressed format for .osm file), the file can be downloaded from ",(0,o.kt)("a",{parentName:"p",href:"https://download.geofabrik.de/"},"Geofabrik Download Server")," "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"wget https://download.geofabrik.de/europe/liechtenstein-latest.osm.pbf -o liechtenstein-latest.osm.pbf\n")),(0,o.kt)("p",null,"Installing the Linux dependencies"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt-get -y update \\\nsudo apt-get -y install osmium-tool \\\nsudo apt update \\\nsudo apt-get -y install libpq-dev gdal-bin libgdal-dev libxml2-dev libxslt-dev\n")),(0,o.kt)("p",null,"Installing Python Dependencies"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"pip3 install -r Coreset/requirements.txt\n")),(0,o.kt)("p",null,"Running coreset locally"),(0,o.kt)("p",null,"Convert from compressed pbf format to geojson format"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"osmium export liechtenstein-latest.osm.pbf -o liechtenstein-latest.geojson\n")),(0,o.kt)("p",null," Running the python script to generate the coreset"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"python Coreset/python/coreset.py -f liechtenstein-latest.geojson\n")),(0,o.kt)("p",null,"Building the docker container"),(0,o.kt)("p",null,"In this step you will create a  ",(0,o.kt)("inlineCode",{parentName:"p"},"Dockerfile")," to create your Docker deployment. The ",(0,o.kt)("inlineCode",{parentName:"p"},"Dockerfile")," is a text document that contains the commands used to assemble the image."),(0,o.kt)("p",null,"First, create the ",(0,o.kt)("inlineCode",{parentName:"p"},"Dockerfile"),"."),(0,o.kt)("p",null,"Next, add your desired configuration to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Dockerfile"),". These commands specify how the image will be built, and what extra requirements will be included."),(0,o.kt)("p",null,"Dockerfile"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"FROM python:3.8\n\nRUN apt-get -y update && apt-get -y install osmium-tool && apt update && apt-get -y install libpq-dev gdal-bin libgdal-dev libxml2-dev libxslt-dev\n\nADD Coreset Coreset\n\nADD monaco-latest.geojson .\n\nRUN cd Coreset && pip3 install -r requirements.txt\n")),(0,o.kt)("p",null,"We will use the ",(0,o.kt)("inlineCode",{parentName:"p"},"python:3.8")," image, and we will choose the src directory in the container as our work directory, we run the same commands for installing dependencies that we used locally, but we also add files and directories which are present on our local machine, we also run a test command, in the end, to check whether the script works"),(0,o.kt)("p",null,"To Build the docker container run the docker build command"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"docker build -t <hub-user>/<repo-name>:<tag> .\n")),(0,o.kt)("p",null,"Please replace"),(0,o.kt)("p",null,"<","hub-user> with your docker hub username, If you don\u2019t have a docker hub account ",(0,o.kt)("a",{parentName:"p",href:"https://docs.docker.com/docker-id/"},"Follow these instructions to create docker account"),", and use the username of the account you created"),(0,o.kt)("p",null,"<","repo-name> This is the name of the container, you can name it anything you want"),(0,o.kt)("p",null,"<","tag> This is not required but you can use the latest tag"),(0,o.kt)("p",null,"After you have build the container, the next step is to test it locally and then push it docker hub"),(0,o.kt)("p",null,"Now you can push this repository to the registry designated by its name or tag."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"}," docker push <hub-user>/<repo-name>:<tag>\n")),(0,o.kt)("p",null,"After the repo image has been pushed to docker hub, we can now use the container for running on bacalhau"),(0,o.kt)("h2",{id:"running-on-bacalhau"},"Running on Bacalhau"),(0,o.kt)("p",null,"COMMAND"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"bacalhau docker run \\\n-v QmXuatKaWL24CwrBPC9PzmLW8NGjgvBVJfk6ZGCWUGZgCu:/input \\\njsace/coreset \\\n-- /bin/bash -c 'osmium export input/liechtenstein-latest.osm.pbf -o liechtenstein-latest.geojson;\npython Coreset/python/coreset.py -f input/liechtenstein-latest.geojson -o outputs'\n")),(0,o.kt)("p",null,"Backend: Docker backend here for running the job"),(0,o.kt)("p",null,"Input dataset: Upload the .osm.pbf file while you want to use as a dataset to IPFS, use this CID here "),(0,o.kt)("p",null,"we mount it to the folder inside the container so it can be used by the script"),(0,o.kt)("p",null,"Image: custom docker Image (it has osmium, python and the requirements for the script installed )"),(0,o.kt)("p",null,"Command:"),(0,o.kt)("p",null,"Convert the osm.pbf dataset to geojson (the dataset is stored in the input volume folder)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"osmium export input/.osm.pbf -o liechtenstein-latest.geojson\n")),(0,o.kt)("p",null,"Run the script \u2018-f\u2019 path of the output geojson file from the above step"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"python Coreset/python/coreset.py -f liechtenstein-latest.geojson -o outputs\n")),(0,o.kt)("p",null,"We get the output in stdout"),(0,o.kt)("p",null,"Additional parameters: -k amount of initialized centers (default=5)"),(0,o.kt)("p",null,"-n: size of coreset (default=50)"),(0,o.kt)("p",null,"-o the folder where you want to store you outputs"),(0,o.kt)("p",null,"Insalling bacalhau"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"curl -sL https://get.bacalhau.org/install.sh | bash\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"bacalhau docker run \\\n--id-only \\\n--wait \\\n--timeout 3600 \\\n--wait-timeout-secs 3600 \\\n-v QmXuatKaWL24CwrBPC9PzmLW8NGjgvBVJfk6ZGCWUGZgCu:/input \\\njsace/coreset\n-- /bin/bash -c 'osmium export input/liechtenstein-latest.osm.pbf -o liechtenstein-latest.geojson; python Coreset/python/coreset.py -f liechtenstein-latest.geojson -o outputs'\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"%env JOB_ID={job_id}\n")),(0,o.kt)("p",null,"Running the commands will output a UUID (like ",(0,o.kt)("inlineCode",{parentName:"p"},"54506541-4eb9-45f4-a0b1-ea0aecd34b3e"),"). This is the ID of the job that was created. You can check the status of the job with the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"bacalhau list --id-filter ${JOB_ID} --wide\n")),(0,o.kt)("p",null,'Where it says "',(0,o.kt)("inlineCode",{parentName:"p"},"Completed"),'", that means the job is done, and we can get the results.'),(0,o.kt)("p",null,"To find out more information about your job, run the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"bacalhau describe ${JOB_ID}\n")),(0,o.kt)("p",null,"Since there is no error we can\u2019t see any error instead we see the state of our job to be complete, that means\nwe can download the results!\nwe create a temporary directory to save our results"),(0,o.kt)("p",null,"To Download the results of your job, run "),(0,o.kt)("hr",null),(0,o.kt)("p",null,"the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"rm -rf results && mkdir -p results\nbacalhau get $JOB_ID --output-dir results\n")),(0,o.kt)("p",null,"After the download has finished you should\nsee the following contents in results directory"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"ls results/\n")),(0,o.kt)("h3",{id:"viewing-the-output-csv-files"},"VIEWING THE OUTPUT CSV FILES"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cat results/combined_results/outputs/centers.csv | head -n 10\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cat results/combined_results/outputs/coreset-values-liechtenstein-latest.csv | head -n 10\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cat results/combined_results/outputs/coreset-weights-liechtenstein-latest.csv | head -n 10\n")),(0,o.kt)("p",null,"Sources"),(0,o.kt)("p",null,"[1][http://proceedings.mlr.press/v97/braverman19a/braverman19a.pdf]","(",(0,o.kt)("a",{parentName:"p",href:"http://proceedings.mlr.press/v97/braverman19a/braverman19a.pdf"},"http://proceedings.mlr.press/v97/braverman19a/braverman19a.pdf"),")"),(0,o.kt)("p",null,"[2][https://aaltodoc.aalto.fi/bitstream/handle/123456789/108293/master_Wu_Xiaobo_2021.pdf?sequence=2]","(",(0,o.kt)("a",{parentName:"p",href:"https://aaltodoc.aalto.fi/bitstream/handle/123456789/108293/master_Wu_Xiaobo_2021.pdf?sequence=2"},"https://aaltodoc.aalto.fi/bitstream/handle/123456789/108293/master_Wu_Xiaobo_2021.pdf?sequence=2"),")"))}c.isMDXComponent=!0}}]);