"use strict";(self.webpackChunkbacalhau_docs=self.webpackChunkbacalhau_docs||[]).push([[2538],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>h});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(a),h=o,m=c["".concat(s,".").concat(h)]||c[h]||d[h]||r;return a?n.createElement(m,i(i({ref:t},u),{},{components:a})):n.createElement(m,i({ref:t},u))}));function h(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<r;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},3836:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var n=a(7462),o=(a(7294),a(3905));const r={sidebar_label:"Training-Pytorch-Model",sidebar_position:2},i="Training Pytorch Model with Bacalhau",l={unversionedId:"examples/model-training/Training-Pytorch-Model/index",id:"examples/model-training/Training-Pytorch-Model/index",title:"Training Pytorch Model with Bacalhau",description:"Open In Colab",source:"@site/docs/examples/model-training/Training-Pytorch-Model/index.md",sourceDirName:"examples/model-training/Training-Pytorch-Model",slug:"/examples/model-training/Training-Pytorch-Model/",permalink:"/examples/model-training/Training-Pytorch-Model/",draft:!1,editUrl:"https://github.com/bacalhau-project/docs.bacalhau.org/blob/main/docs/examples/model-training/Training-Pytorch-Model/index.md",tags:[],version:"current",lastUpdatedAt:1676649817,formattedLastUpdatedAt:"Feb 17, 2023",sidebarPosition:2,frontMatter:{sidebar_label:"Training-Pytorch-Model",sidebar_position:2},sidebar:"documentationSidebar",previous:{title:"Stable-Diffusion-Dreambooth",permalink:"/examples/model-training/Stable-Diffusion-Dreambooth/"},next:{title:"Training-Tensorflow-Model",permalink:"/examples/model-training/Training-Tensorflow-Model/"}},s={},p=[{value:"Prerequisite",id:"prerequisite",level:2},{value:"Training the Model Locally",id:"training-the-model-locally",level:2},{value:"Uploading the dataset to IPFS",id:"uploading-the-dataset-to-ipfs",level:2},{value:"Pinata",id:"pinata",level:3},{value:"NFT.Storage (Recommneded Option)",id:"nftstorage-recommneded-option",level:3},{value:"Running a Bacalhau Job to Generate Easy OCR output",id:"running-a-bacalhau-job-to-generate-easy-ocr-output",level:2},{value:"Sturucture of the command",id:"sturucture-of-the-command",level:3},{value:"Checking the State of your Jobs",id:"checking-the-state-of-your-jobs",level:2},{value:"Viewing your Job Output",id:"viewing-your-job-output",level:2}],u={toc:p};function d(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"training-pytorch-model-with-bacalhau"},"Training Pytorch Model with Bacalhau"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://colab.research.google.com/github/bacalhau-project/examples/blob/main/model-training/Training-Tensorflow-Model/index.ipynb"},(0,o.kt)("img",{parentName:"a",src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Colab"})),"\n",(0,o.kt)("a",{parentName:"p",href:"https://mybinder.org/v2/gh/bacalhau-project/examples/HEAD?labpath=model-training/Training-Tensorflow-Model/index.ipynb"},(0,o.kt)("img",{parentName:"a",src:"https://mybinder.org/badge.svg",alt:"Open In Binder"}))),(0,o.kt)("p",null,"In this example tutorial, we will show you how to train a Pytorch RNN MNIST neural network model with Bacalhau. PyTorch is a framework developed by Facebook AI Research for deep learning, featuring both beginner-friendly debugging tools and a high-level of customization for advanced users, with researchers and practitioners using it across companies like Facebook and Tesla. Applications include computer vision, natural language processing, cryptography, and more"),(0,o.kt)("h2",{id:"prerequisite"},"Prerequisite"),(0,o.kt)("p",null,"To get started, you need to install the Bacalhau client, see more information ",(0,o.kt)("a",{parentName:"p",href:"https://docs.bacalhau.org/getting-started/installation"},"here")),(0,o.kt)("h2",{id:"training-the-model-locally"},"Training the Model Locally"),(0,o.kt)("p",null,"Cloning the Pytorch examples"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"%%bash\ngit clone https://github.com/pytorch/examples\n")),(0,o.kt)("p",null,"Next we run the command below to begin training of the mnist_rnn model. We added the --save-model flag to save the model"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"%%bash\npython ./examples/mnist_rnn/main.py --save-model\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"%%bash\nmkdir ./data\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from torchvision import datasets\nfrom torchvision.transforms import ToTensor\n\ntraining_data = datasets.MNIST(\n    root="./data",\n    train=True,\n    download=True,\n    transform=ToTensor()\n)\n\ntest_data = datasets.MNIST(\n    root="./data",\n    train=False,\n    download=True,\n    transform=ToTensor()\n)\n')),(0,o.kt)("h2",{id:"uploading-the-dataset-to-ipfs"},"Uploading the dataset to IPFS"),(0,o.kt)("p",null,"Since Container running on bacalhau has no network we need to manually upload the dateset to IPFS"),(0,o.kt)("p",null,"we can download the dataset using pytorch datasets in this case we need to download the MNIST dataset we create a folder data where we will download the dataset"),(0,o.kt)("p",null,"Using the IPFS cli"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"ipfs add -r data\n")),(0,o.kt)("p",null,"Since the data Uploaded To IPFS using IPFS CLI isn\u2019t pinned or will be garbage collected. The data needs to be ",(0,o.kt)("strong",{parentName:"p"},"pinned"),". Pinning is the mechanism that allows you to tell IPFS to always keep a given object somewhere, the default being your local node, though this can be different if you use a third-party remote pinning service."),(0,o.kt)("p",null,"There a different pinning services available you can you any one of them"),(0,o.kt)("h3",{id:"pinata"},(0,o.kt)("a",{parentName:"h3",href:"https://app.pinata.cloud/"},"Pinata")),(0,o.kt)("p",null,"Click on the upload folder button"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://i.imgur.com/crnkrwy.png",alt:null})),(0,o.kt)("p",null,"After the upload has finished copy the CID"),(0,o.kt)("h3",{id:"nftstorage-recommneded-option"},(0,o.kt)("a",{parentName:"h3",href:"https://nft.storage/"},"NFT.Storage")," (Recommneded Option)"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://nft.storage/docs/how-to/nftup/"},"Upload files and directories with NFTUp")," "),(0,o.kt)("p",null,"To upload your dataset using NFTup just drag and drop your directory it will upload it to IPFS"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://i.imgur.com/03NEonV.png",alt:null})),(0,o.kt)("p",null,"You can view you uploaded dataset by clicking on the Gateway URL"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://gateway.pinata.cloud/ipfs/QmdeQjz1HQQdT9wT2NHX86Le9X6X6ySGxp8dfRUKPtgziw/?filename=data"},"https://gateway.pinata.cloud/ipfs/QmdeQjz1HQQdT9wT2NHX86Le9X6X6ySGxp8dfRUKPtgziw/?filename=data")),(0,o.kt)("h2",{id:"running-a-bacalhau-job-to-generate-easy-ocr-output"},"Running a Bacalhau Job to Generate Easy OCR output"),(0,o.kt)("p",null,"After the repo image has been pushed to docker hub, we can now use the container for running on Bacalhau. To submit a job, run the following Bacalhau command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"%%bash --out job_id\nbacalhau docker run \\\n--gpu 1 \\\n--timeout 3600 \\\n--wait-timeout-secs 3600 \\\n--wait \\\n--id-only \\\npytorch/pytorch \\\n-w /outputs \\\n -v QmdeQjz1HQQdT9wT2NHX86Le9X6X6ySGxp8dfRUKPtgziw:/data \\\n-u https://raw.githubusercontent.com/pytorch/examples/main/mnist_rnn/main.py \\\n-- python ../inputs/main.py --save-model\n")),(0,o.kt)("h3",{id:"sturucture-of-the-command"},"Sturucture of the command"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"--gpu 1"),": Request 1 GPU to train the model")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"pytorch/pytorch"),": Using the official pytorch Docker image")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"-v QmdeQjz1HQQd....."),": Mounting the uploaded dataset to path")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"-u https://raw.githubusercontent.com/py.........."),": Mounting our training script we will use the URL to this ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/pytorch/examples/blob/main/mnist_rnn/main.py"},"Pytorch example")," ")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"-w /outputs:")," Our working directory is /outputs. This is the folder where we will to save the model as it will automatically gets uploaded to IPFS as outputs"))),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"python ../inputs/main.py --save-model"),": URL script gets mounted to the /inputs folder in the container. "),(0,o.kt)("p",null,"When a job is sumbitted, Bacalhau prints out the related ",(0,o.kt)("inlineCode",{parentName:"p"},"job_id"),". We store that in an environment variable so that we can reuse it later on."),(0,o.kt)("h2",{id:"checking-the-state-of-your-jobs"},"Checking the State of your Jobs"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Job status"),": You can check the status of the job using ",(0,o.kt)("inlineCode",{parentName:"li"},"bacalhau list"),". ")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"%%bash\nbacalhau list --id-filter ${JOB_ID}\n")),(0,o.kt)("p",null,"When it says ",(0,o.kt)("inlineCode",{parentName:"p"},"Completed"),", that means the job is done, and we can get the results."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Job information"),": You can find out more information about your job by using ",(0,o.kt)("inlineCode",{parentName:"li"},"bacalhau describe"),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"%%bash\nbacalhau describe ${JOB_ID}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Job download"),": You can download your job results directly by using ",(0,o.kt)("inlineCode",{parentName:"li"},"bacalhau get"),". Alternatively, you can choose to create a directory to store your results. In the command below, we created a directory and downloaded our job output to be stored in that directory.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"%%bash\nrm -rf results && mkdir -p results\nbacalhau get $JOB_ID --output-dir results\n")),(0,o.kt)("p",null,"After the download has finished you should see the following contents in results directory"),(0,o.kt)("h2",{id:"viewing-your-job-output"},"Viewing your Job Output"),(0,o.kt)("p",null,"Each job creates 3 subfolders: the ",(0,o.kt)("strong",{parentName:"p"},"combined_results"),", ",(0,o.kt)("strong",{parentName:"p"},"per_shard files"),", and the ",(0,o.kt)("strong",{parentName:"p"},"raw")," directory. To view the file, run the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"%%bash\nls results/ # list the contents of the current directory \ncat results/combined_results/stdout # displays the contents of the file given to it as a parameter.\nls results/combined_results/outputs/ # list the successfully trained model\n")))}d.isMDXComponent=!0}}]);