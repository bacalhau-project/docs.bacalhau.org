"use strict";(self.webpackChunkbacalhau_docs=self.webpackChunkbacalhau_docs||[]).push([[4898],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6338:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_label:"EasyOCR",sidebar_position:10},i="EasyOCR (Optical Character Recognition) on bacalhau",l={unversionedId:"examples/model-inference/EasyOCR/index",id:"examples/model-inference/EasyOCR/index",title:"EasyOCR (Optical Character Recognition) on bacalhau",description:"Open In Colab",source:"@site/docs/examples/model-inference/EasyOCR/index.md",sourceDirName:"examples/model-inference/EasyOCR",slug:"/examples/model-inference/EasyOCR/",permalink:"/examples/model-inference/EasyOCR/",draft:!1,editUrl:"https://github.com/bacalhau-project/docs.bacalhau.org/blob/main/docs/examples/model-inference/EasyOCR/index.md",tags:[],version:"current",lastUpdatedAt:1674655930,formattedLastUpdatedAt:"Jan 25, 2023",sidebarPosition:10,frontMatter:{sidebar_label:"EasyOCR",sidebar_position:10},sidebar:"documentationSidebar",previous:{title:"Object Detection - YOLOv5",permalink:"/examples/model-inference/object-detection-yolo5/"},next:{title:"Speech Recognition using Whisper",permalink:"/examples/model-inference/Openai-Whisper/"}},s={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Running Locally\u200b",id:"running-locally",level:2},{value:"<strong>Running the container on bacalhau</strong>",id:"running-the-container-on-bacalhau",level:2}],p={toc:c};function u(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"easyocr-optical-character-recognition-on-bacalhau"},"EasyOCR (Optical Character Recognition) on bacalhau"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://colab.research.google.com/github/bacalhau-project/examples/blob/main/model-inference/EasyOCR/index.ipynb"},(0,r.kt)("img",{parentName:"a",src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Colab"})),"\n",(0,r.kt)("a",{parentName:"p",href:"https://mybinder.org/v2/gh/bacalhau-project/examples/HEAD?labpath=model-inference/EasyOCR/index.ipynb"},(0,r.kt)("img",{parentName:"a",src:"https://mybinder.org/badge.svg",alt:"Open In Binder"}))),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"EasyOCR is a ready-to-use OCR with 80+ supported languages and all popular writing scripts including Latin, Chinese, Arabic, Devanagari, Cyrillic and etc. it is developed by ",(0,r.kt)("a",{parentName:"p",href:"https://www.jaided.ai/"},"https://www.jaided.ai/")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://github.com/JaidedAI/EasyOCR/raw/master/examples/example2.png",alt:null})),(0,r.kt)("p",null,"EasyOCR is leveraging recent works in academic and other open source projects to create a ready-to-use product with state-of-the-art performance.\nwith easy OCR you use the pretrained models or use your own fine tuned model "),(0,r.kt)("p",null,"It can be used to digitalize paper records or for recognizing characters in images stored on IPFS/Filecoin or on the web"),(0,r.kt)("h2",{id:"running-locally"},"Running Locally\u200b"),(0,r.kt)("p",null,"Installing dependencies"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip install easyocr\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Collecting easyocr\n\x1b[?25l  Downloading https://files.pythonhosted.org/packages/9d/b4/6a402a7ec3890e94313a7d2804190713e2c942371b39c7ccd9070280bc36/easyocr-1.3.2-py3-none-any.whl (63.2MB)\n\x1b[K     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 63.2MB 114kB/s \n\x1b[?25hRequirement already satisfied: torchvision>=0.5 in /usr/local/lib/python3.7/dist-packages (from easyocr) (0.10.0+cu102)\nRequirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from easyocr) (1.19.5)\nRequirement already satisfied: scikit-image in /usr/local/lib/python3.7/dist-packages (from easyocr) (0.16.2)\nCollecting python-bidi\n  Downloading https://files.pythonhosted.org/packages/33/b0/f942d146a2f457233baaafd6bdf624eba8e0f665045b4abd69d1b62d097d/python_bidi-0.4.2-py2.py3-none-any.whl\nRequirement already satisfied: torch in /usr/local/lib/python3.7/dist-packages (from easyocr) (1.9.0+cu102)\nRequirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from easyocr) (1.4.1)\nRequirement already satisfied: PyYAML in /usr/local/lib/python3.7/dist-packages (from easyocr) (3.13)\nRequirement already satisfied: opencv-python in /usr/local/lib/python3.7/dist-packages (from easyocr) (4.1.2.30)\nRequirement already satisfied: Pillow in /usr/local/lib/python3.7/dist-packages (from easyocr) (7.1.2)\nRequirement already satisfied: matplotlib!=3.0.0,>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-image->easyocr) (3.2.2)\nRequirement already satisfied: imageio>=2.3.0 in /usr/local/lib/python3.7/dist-packages (from scikit-image->easyocr) (2.4.1)\nRequirement already satisfied: PyWavelets>=0.4.0 in /usr/local/lib/python3.7/dist-packages (from scikit-image->easyocr) (1.1.1)\nRequirement already satisfied: networkx>=2.0 in /usr/local/lib/python3.7/dist-packages (from scikit-image->easyocr) (2.5.1)\nRequirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from python-bidi->easyocr) (1.15.0)\nRequirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from torch->easyocr) (3.7.4.3)\nRequirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib!=3.0.0,>=2.0.0->scikit-image->easyocr) (2.8.1)\nRequirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib!=3.0.0,>=2.0.0->scikit-image->easyocr) (0.10.0)\nRequirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib!=3.0.0,>=2.0.0->scikit-image->easyocr) (2.4.7)\nRequirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib!=3.0.0,>=2.0.0->scikit-image->easyocr) (1.3.1)\nRequirement already satisfied: decorator<5,>=4.3 in /usr/local/lib/python3.7/dist-packages (from networkx>=2.0->scikit-image->easyocr) (4.4.2)\nInstalling collected packages: python-bidi, easyocr\nSuccessfully installed easyocr-1.3.2 python-bidi-0.4.2\n")),(0,r.kt)("p",null,"load example images"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx degit JaidedAI/EasyOCR/examples -f\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\x1b[K\x1b[?25hnpx: installed 1 in 2.792s\n\x1b[36m> destination directory is not empty. Using --force, continuing\x1b[39m\n\x1b[36m> cloned \x1b[1mJaidedAI/EasyOCR\x1b[22m#\x1b[1mHEAD\x1b[22m\x1b[39m\n")),(0,r.kt)("p",null,"list them"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ls -l\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"total 3508\n-rw-r--r-- 1 root root   59898 Jun 16 22:36 chinese.jpg\n-rw-r--r-- 1 root root   97910 Jun 16 22:36 easyocr_framework.jpeg\n-rw-r--r-- 1 root root 1740957 Jun 16 22:36 english.png\n-rw-r--r-- 1 root root  487995 Jun 16 22:36 example2.png\n-rw-r--r-- 1 root root  127454 Jun 16 22:36 example3.png\n-rw-r--r-- 1 root root  488641 Jun 16 22:36 example.png\n-rw-r--r-- 1 root root  168376 Jun 16 22:36 french.jpg\n-rw-r--r-- 1 root root   42159 Jun 16 22:36 japanese.jpg\n-rw-r--r-- 1 root root  225531 Jun 16 22:36 korean.png\ndrwxr-xr-x 1 root root    4096 Jun 15 13:37 sample_data\n-rw-r--r-- 1 root root   82229 Jun 16 22:36 thai.jpg\n-rw-r--r-- 1 root root   34706 Jun 16 22:36 width_ths.png\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# show an image\nimport PIL\nfrom PIL import ImageDraw\nim = PIL.Image.open("thai.jpg")\nim\n')),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"png",src:n(5482).Z,width:"600",height:"800"})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Create a reader to do OCR.\n# If you change to GPU instance, it will be faster. But CPU is enough.\n# (by MENU > Runtime > Change runtime type > GPU, then redo from beginning )\nimport easyocr\nreader = easyocr.Reader(['th','en'])\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CUDA not available - defaulting to CPU. Note: This module is much faster with a GPU.\nDownloading detection model, please wait. This may take several minutes depending upon your network connection.\n\n\n\n\nDownloading recognition model, please wait. This may take several minutes depending upon your network connection.\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Doing OCR. Get bounding boxes.\nbounds = reader.readtext('thai.jpg')\nbounds\n")),(0,r.kt)("p",null,"we get cordinates which represent a rectangle containing text and the text itself"),(0,r.kt)("p",null,"After that we will build a DOCKERFILE to containernize this script and then run it on bacalhau"),(0,r.kt)("h1",{id:"building-docker-container-optional"},"Building docker container (Optional)"),(0,r.kt)("p",null,"Note* you can directly skip to running on bacalhau ands use the prebuild docker image"),(0,r.kt)("p",null,"In this step you will create docker container using the dockerfile in the Easy OCR repo"),(0,r.kt)("p",null,"Steps to build the container"),(0,r.kt)("p",null,"clone the repo"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"git clone https://github.com/JaidedAI/EasyOCR\ncd EasyOCR\n")),(0,r.kt)("p",null,"Builing the container"),(0,r.kt)("p",null,"To Build the docker container run the docker build command"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"docker build -t hub-user/repo-name:tag .\n")),(0,r.kt)("p",null,"Please replace"),(0,r.kt)("p",null,"hub-user with your docker hub username, If you don\u2019t have a docker hub account Follow these instructions to create docker account, and use the username of the account you created"),(0,r.kt)("p",null,"repo-name This is the name of the container, you can name it anything you want"),(0,r.kt)("p",null,"tag This is not required but you can use the latest tag"),(0,r.kt)("p",null,"After you have build the container, the next step is to test it locally and then push it docker hub"),(0,r.kt)("p",null,"Now you can push this repository to the registry designated by its name or tag."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"}," docker push hub-user/repo-name:tag\n")),(0,r.kt)("p",null,"After the repo image has been pushed to docker hub, we can now use the container for running on bacalhau"),(0,r.kt)("h2",{id:"running-the-container-on-bacalhau"},(0,r.kt)("strong",{parentName:"h2"},"Running the container on bacalhau")),(0,r.kt)("p",null,"After the repo image has been pushed to docker hub, we can now use the container for running on bacalhau"),(0,r.kt)("p",null,"This command is similar to what we have run locally but we change the output directory to the outputs folder so that the results are saved to IPFS"),(0,r.kt)("p",null,"We use the --gpu flag to denote the no of GPU we are going to use"),(0,r.kt)("p",null,"Since the model and the image aren't present in the container we will mount the image from an URL and the model from IPFS"),(0,r.kt)("p",null,"you can find models to download from here\n",(0,r.kt)("a",{parentName:"p",href:"https://www.jaided.ai/easyocr/modelhub/"},"https://www.jaided.ai/easyocr/modelhub/")),(0,r.kt)("p",null,"choose the model you want to use in this case we will be using the zh_sim_g2 model"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"!curl -sL https://get.bacalhau.org/install.sh | bash\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Your system is linux_amd64\nNo BACALHAU detected. Installing fresh BACALHAU CLI...\nGetting the latest BACALHAU CLI...\nInstalling v0.3.11 BACALHAU CLI...\nDownloading https://github.com/filecoin-project/bacalhau/releases/download/v0.3.11/bacalhau_v0.3.11_linux_amd64.tar.gz ...\nDownloading sig file https://github.com/filecoin-project/bacalhau/releases/download/v0.3.11/bacalhau_v0.3.11_linux_amd64.tar.gz.signature.sha256 ...\nVerified OK\nExtracting tarball ...\nNOT verifying Bin\nbacalhau installed into /usr/local/bin successfully.\nClient Version: v0.3.11\nServer Version: v0.3.11\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"bacalhau docker run \\\n-v bafybeibvcllzpfviggluobcfassm3vy4x2a4yanfxtmn4ir7olyzfrgq64:/root/.EasyOCR/model/zh_sim_g2.pth  \\\n-u https://raw.githubusercontent.com/JaidedAI/EasyOCR/ae773d693c3f355aac2e58f0d8142c600172f016/examples/chinese.jpg \\\n--timeout 3600 \\\n--wait-timeout-secs 3600 \\\n--gpu 1  \\\n--id-only \\\n--wait \\\njsacex/easyocr \\\n--  easyocr -l ch_sim  en -f ./inputs/chinese.jpg --detail=1 --gpu=True\n\n")),(0,r.kt)("p",null,"Structure of the command"),(0,r.kt)("p",null,"Mounting the model from IPFS\n-v bafybeibvcllzpfviggluobcfassm3vy4x2a4yanfxtmn4ir7olyzfrgq64:/root/.EasyOCR/model/zh_sim_g2.pth "),(0,r.kt)("p",null,"Mounting the Input Image from a URL\n-u ",(0,r.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/JaidedAI/EasyOCR/ae773d693c3f355aac2e58f0d8142c600172f016/examples/chinese.jpg"},"https://raw.githubusercontent.com/JaidedAI/EasyOCR/ae773d693c3f355aac2e58f0d8142c600172f016/examples/chinese.jpg")),(0,r.kt)("p",null,"Specifying the no of GPUs\n--gpu 1"),(0,r.kt)("p",null,"Name of the Docker Image\njsacex/easyocr"),(0,r.kt)("p",null,"The easyocr command"),(0,r.kt)("p",null,"--  easyocr -l ch_sim  en -f ./inputs/chinese.jpg --detail=1 --gpu=True"),(0,r.kt)("p",null,"-l the name of the model which is ch_sim"),(0,r.kt)("p",null,"-f path to the input Image or directory"),(0,r.kt)("p",null,"--detail=1 level of detail"),(0,r.kt)("p",null,"--gpu=True we set this flag to true since we are running inference on a GPU, if you run this on a CPU you set this to false "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"bacalhau list --id-filter ${JOB_ID}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\x1b[92;100m CREATED  \x1b[0m\x1b[92;100m ID       \x1b[0m\x1b[92;100m JOB                     \x1b[0m\x1b[92;100m STATE     \x1b[0m\x1b[92;100m VERIFIED \x1b[0m\x1b[92;100m PUBLISHED               \x1b[0m\n\x1b[97;40m 14:27:53 \x1b[0m\x1b[97;40m b8267063 \x1b[0m\x1b[97;40m Docker jsacex/easyoc... \x1b[0m\x1b[97;40m Completed \x1b[0m\x1b[97;40m          \x1b[0m\x1b[97;40m /ipfs/QmaDS3cmVCoUsC... \x1b[0m\n")),(0,r.kt)("p",null,'Where it says "Completed", that means the job is done, and we can get the results.'),(0,r.kt)("p",null,"To find out more information about your job, run the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"bacalhau describe ${JOB_ID}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"rm -rf results && mkdir -p results\nbacalhau get $JOB_ID --output-dir results\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Fetching results of job 'b8267063-37af-4aec-a65d-201a449dec89'...\nResults for job 'b8267063-37af-4aec-a65d-201a449dec89' have been written to...\nresults\n\n\n2022/11/11 14:28:48 failed to sufficiently increase receive buffer size (was: 208 kiB, wanted: 2048 kiB, got: 416 kiB). See https://github.com/lucas-clemente/quic-go/wiki/UDP-Receive-Buffer-Size for details.\n")),(0,r.kt)("p",null,"After the download has finished you should see the following contents in results directory"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ls results/\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"combined_results\nper_shard\nraw\n")),(0,r.kt)("p",null,"To view the results run the command"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"cat results/combined_results/stdout\n")))}u.isMDXComponent=!0},5482:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/index_12_0-0b7a810c619788be2b21c044a7d17c5a.png"}}]);