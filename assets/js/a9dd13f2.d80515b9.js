"use strict";(self.webpackChunkbacalhau_docs=self.webpackChunkbacalhau_docs||[]).push([[2283],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(t),m=r,f=d["".concat(s,".").concat(m)]||d[m]||c[m]||i;return t?a.createElement(f,o(o({ref:n},u),{},{components:t})):a.createElement(f,o({ref:n},u))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4947:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const i={sidebar_label:"Nodes"},o="Nodes API Documentation",l={unversionedId:"references/api/nodes",id:"references/api/nodes",title:"Nodes API Documentation",description:"Nodes API provides a way to query information about the nodes in the cluster.",source:"@site/docs/references/api/nodes.md",sourceDirName:"references/api",slug:"/references/api/nodes",permalink:"/references/api/nodes",draft:!1,editUrl:"https://github.com/bacalhau-project/docs.bacalhau.org/blob/main/docs/references/api/nodes.md",tags:[],version:"current",lastUpdatedAt:1698074737,formattedLastUpdatedAt:"Oct 23, 2023",frontMatter:{sidebar_label:"Nodes"},sidebar:"documentationSidebar",previous:{title:"Jobs",permalink:"/references/api/jobs"},next:{title:"Commands CLI (Experimental)",permalink:"/references/cli/"}},s={},p=[{value:"Describe Node",id:"describe-node",level:2},{value:"List Nodes",id:"list-nodes",level:2}],u={toc:p},d="wrapper";function c(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"nodes-api-documentation"},"Nodes API Documentation"),(0,r.kt)("p",null,"Nodes API provides a way to query information about the nodes in the cluster."),(0,r.kt)("h2",{id:"describe-node"},"Describe Node"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Endpoint:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"GET /api/v1/orchestrator/nodes/:nodeID")),(0,r.kt)("p",null,"Retrieve information about a specific node."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},":nodeID"),": Identifier of the node to describe. (e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"QmUDAXvv31WPZ8U9CzuRTMn9iFGiopGE7rHiah1X8a6PkT"),")")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Response"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Node"),": Detailed information about the requested node.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl 127.0.0.1:1234/api/v1/orchestrator/nodes/QmUDAXvv31WPZ8U9CzuRTMn9iFGiopGE7rHiah1X8a6PkT\n{\n  "Node": {\n    "PeerInfo": {\n      "ID": "QmUDAXvv31WPZ8U9CzuRTMn9iFGiopGE7rHiah1X8a6PkT",\n      "Addrs": [\n        "/ip4/34.34.247.247/tcp/1235"\n      ]\n    },\n    "NodeType": "Compute",\n    "Labels": {\n      "Architecture": "amd64",\n      "Operating-System": "linux",\n      "git-lfs": "True",\n      "owner": "bacalhau"\n    },\n    "ComputeNodeInfo": {\n      "ExecutionEngines": [\n        "docker",\n        "wasm"\n      ],\n      "Publishers": [\n        "s3",\n        "noop",\n        "ipfs"\n      ],\n      "StorageSources": [\n        "urldownload",\n        "inline",\n        "repoclone",\n        "repoclonelfs",\n        "s3",\n        "ipfs"\n      ],\n      "MaxCapacity": {\n        "CPU": 3.2,\n        "Memory": 12561049190,\n        "Disk": 582010404864,\n        "GPU": 1\n      },\n      "AvailableCapacity": {\n        "CPU": 3.2,\n        "Memory": 12561049190,\n        "Disk": 582010404864,\n        "GPU": 1\n      },\n      "MaxJobRequirements": {\n        "CPU": 3.2,\n        "Memory": 12561049190,\n        "Disk": 582010404864,\n        "GPU": 1\n      },\n      "RunningExecutions": 0,\n      "EnqueuedExecutions": 0\n    },\n    "BacalhauVersion": {\n      "Major": "1",\n      "Minor": "1",\n      "GitVersion": "v1.1.0",\n      "GitCommit": "970e1a0f23c7eb739a097aa8212f7964434bcd97",\n      "BuildDate": "2023-09-25T07:59:00Z",\n      "GOOS": "linux",\n      "GOARCH": "amd64"\n    }\n  }\n}\n')),(0,r.kt)("h2",{id:"list-nodes"},"List Nodes"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Endpoint:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"GET /api/v1/orchestrator/nodes")),(0,r.kt)("p",null,"Retrieve a list of nodes."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"labels"),": Use label-based criteria to filter nodes. See ",(0,r.kt)("a",{parentName:"li",href:"../api#label-filtering"},"Label Filtering")," for usage details."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"limit"),": Set the maximum number of jobs to return. Default is set to 10."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"next_token"),": Utilize this parameter for pagination continuation."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"order_by"),": Determine the ordering of jobs. Choose between ",(0,r.kt)("inlineCode",{parentName:"li"},"id"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"type"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"available_cpu"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"available_memory"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"available_disk")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"available_gpu"),". (default is ",(0,r.kt)("inlineCode",{parentName:"li"},"id"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"reverse"),": Opt to reverse the default order of displayed jobs.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Response"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Nodes"),": List of matching nodes."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"NextToken")," ",(0,r.kt)("inlineCode",{parentName:"li"},"(string)"),": Pagination token.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example"),":"),(0,r.kt)("p",null,"Find two linux nodes with most available Memory"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl --get  "127.0.0.1:1234/api/v1/orchestrator/nodes?limit=2&order_by=available_memory" --data-urlencode \'labels=Operating-System=linux\'\n{\n  "NextToken": "",\n  "Nodes": [\n    {\n      "PeerInfo": {\n        "ID": "QmcC3xifiiCuGGQ9rpvefUoary9tY65x2HaNxSdeMTvM9U",\n        "Addrs": [\n          "/ip4/212.248.248.248/tcp/1235"\n        ]\n      },\n      "NodeType": "Compute",\n      "Labels": {\n        "Architecture": "amd64",\n        "Operating-System": "linux",\n        "env": "prod",\n        "git-lfs": "False",\n        "name": "saturnia_len20"\n      },\n      "ComputeNodeInfo": {\n        "ExecutionEngines": [\n          "wasm",\n          "docker"\n        ],\n        "Publishers": [\n          "noop",\n          "ipfs"\n        ],\n        "StorageSources": [\n          "urldownload",\n          "inline",\n          "ipfs"\n        ],\n        "MaxCapacity": {\n          "CPU": 102,\n          "Memory": 858993459200,\n          "Disk": 562967789568,\n          "GPU": 2\n        },\n        "AvailableCapacity": {\n          "CPU": 102,\n          "Memory": 858993459200,\n          "Disk": 562967789568,\n          "GPU": 2\n        },\n        "MaxJobRequirements": {\n          "CPU": 96,\n          "Memory": 858993459200,\n          "Disk": 562967789568,\n          "GPU": 2\n        },\n        "RunningExecutions": 0,\n        "EnqueuedExecutions": 0\n      },\n      "BacalhauVersion": {\n        "Major": "1",\n        "Minor": "1",\n        "GitVersion": "v1.1.0",\n        "GitCommit": "970e1a0f23c7eb739a097aa8212f7964434bcd97",\n        "BuildDate": "2023-09-25T07:59:00Z",\n        "GOOS": "linux",\n        "GOARCH": "amd64"\n      }\n    },\n    {\n      "PeerInfo": {\n        "ID": "QmXaXu9N5GNetatsvwnTfQqNtSeKAD6uCmarbh3LMRYAcF",\n        "Addrs": [\n          "/ip4/35.245.245.245/tcp/1235"\n        ]\n      },\n      "NodeType": "Compute",\n      "Labels": {\n        "Architecture": "amd64",\n        "Operating-System": "linux",\n        "git-lfs": "True",\n        "owner": "bacalhau"\n      },\n      "ComputeNodeInfo": {\n        "ExecutionEngines": [\n          "docker",\n          "wasm"\n        ],\n        "Publishers": [\n          "noop",\n          "ipfs",\n          "s3"\n        ],\n        "StorageSources": [\n          "s3",\n          "ipfs",\n          "urldownload",\n          "inline",\n          "repoclone",\n          "repoclonelfs"\n        ],\n        "MaxCapacity": {\n          "CPU": 12.8,\n          "Memory": 53931124326,\n          "Disk": 718749414195,\n          "GPU": 0\n        },\n        "AvailableCapacity": {\n          "CPU": 12.8,\n          "Memory": 53931124326,\n          "Disk": 718749414195,\n          "GPU": 0\n        },\n        "MaxJobRequirements": {\n          "CPU": 12.8,\n          "Memory": 53931124326,\n          "Disk": 718749414195,\n          "GPU": 0\n        },\n        "RunningExecutions": 0,\n        "EnqueuedExecutions": 0\n      },\n      "BacalhauVersion": {\n        "Major": "1",\n        "Minor": "1",\n        "GitVersion": "v1.1.0",\n        "GitCommit": "970e1a0f23c7eb739a097aa8212f7964434bcd97",\n        "BuildDate": "2023-09-25T07:59:00Z",\n        "GOOS": "linux",\n        "GOARCH": "amd64"\n      }\n    }\n  ]\n}\n')))}c.isMDXComponent=!0}}]);