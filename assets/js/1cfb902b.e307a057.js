"use strict";(self.webpackChunkbacalhau_docs=self.webpackChunkbacalhau_docs||[]).push([[9790],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},l="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),l=p(n),f=a,m=l["".concat(s,".").concat(f)]||l[f]||d[f]||i;return n?r.createElement(m,o(o({ref:t},u),{},{components:n})):r.createElement(m,o({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=f;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[l]="string"==typeof e?e:a,o[1]=c;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},1485:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_label:"InputSource"},o="InputSource Specification",c={unversionedId:"references/job-specification/input-source",id:"references/job-specification/input-source",title:"InputSource Specification",description:"An InputSource defines where and how to retrieve specific artifacts needed for a Task, such as files or data, and where to mount them within the task's context. This ensures the necessary data is present before the task's execution begins.",source:"@site/docs/references/job-specification/input-source.md",sourceDirName:"references/job-specification",slug:"/references/job-specification/input-source",permalink:"/references/job-specification/input-source",draft:!1,editUrl:"https://github.com/bacalhau-project/docs.bacalhau.org/blob/main/docs/references/job-specification/input-source.md",tags:[],version:"current",lastUpdatedAt:1698591497,formattedLastUpdatedAt:"Oct 29, 2023",frontMatter:{sidebar_label:"InputSource"},sidebar:"documentationSidebar",previous:{title:"Constraint",permalink:"/references/job-specification/constraint"},next:{title:"Label",permalink:"/references/job-specification/label"}},s={},p=[{value:"<code>InputSource</code> Parameters:",id:"inputsource-parameters",level:2},{value:"Usage Examples",id:"usage-examples",level:2}],u={toc:p},l="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(l,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"inputsource-specification"},"InputSource Specification"),(0,a.kt)("p",null,"An ",(0,a.kt)("inlineCode",{parentName:"p"},"InputSource")," defines where and how to retrieve specific artifacts needed for a ",(0,a.kt)("a",{parentName:"p",href:"task"},(0,a.kt)("inlineCode",{parentName:"a"},"Task")),", such as files or data, and where to mount them within the task's context. This ensures the necessary data is present before the task's execution begins."),(0,a.kt)("p",null,"Bacalhau's ",(0,a.kt)("inlineCode",{parentName:"p"},"InputSource")," natively supports fetching data from remote sources like S3 and IPFS and can also mount local directories. It is intended to be flexible for future expansion."),(0,a.kt)("h2",{id:"inputsource-parameters"},(0,a.kt)("inlineCode",{parentName:"h2"},"InputSource")," Parameters:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Source")," ",(0,a.kt)("code",null,"(",(0,a.kt)("a",{href:"./spec-config"},"SpecConfig")," : \\<required",">",")"),": Specifies the origin of the artifact, which could be a URL, an S3 bucket, or other locations.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Alias")," ",(0,a.kt)("inlineCode",{parentName:"p"},"(string: <optional>)"),": An optional identifier for this input source. It's particularly useful for dynamic operations within a task, such as dynamically importing data in WebAssembly using an alias.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Target")," ",(0,a.kt)("inlineCode",{parentName:"p"},"(string: <required>)"),": Defines the path inside the task's environment where the retrieved artifact should be mounted or stored. This ensures that the task can access the data during its execution."))),(0,a.kt)("h2",{id:"usage-examples"},"Usage Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-YAML"},"InputSources:\n  - Source:\n      Type: s3\n      Params:\n        Bucket: my_bucket\n        Region: us-west-1\n    Target: /my_s3_data\n  - Source:\n      Type: localDirectory\n      Params:\n        SourcePath: /path/to/local/directory\n        ReadWrite: true\n    Target: /my_local_data\n")),(0,a.kt)("p",null,"In this example, the first input source fetches data from an S3 bucket and mounts it at ",(0,a.kt)("inlineCode",{parentName:"p"},"/my_s3_data")," within the task. The second input source mounts a local directory at ",(0,a.kt)("inlineCode",{parentName:"p"},"/my_local_data")," and allows the task to read and write data to it."))}d.isMDXComponent=!0}}]);