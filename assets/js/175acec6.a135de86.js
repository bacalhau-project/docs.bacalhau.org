"use strict";(self.webpackChunkbacalhau_docs=self.webpackChunkbacalhau_docs||[]).push([[2417],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var i=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,i)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,i,n=function(e,t){if(null==e)return{};var r,i,n={},a=Object.keys(e);for(i=0;i<a.length;i++)r=a[i],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)r=a[i],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=i.createContext({}),c=function(e){var t=i.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(r),d=n,f=u["".concat(l,".").concat(d)]||u[d]||h[d]||a;return r?i.createElement(f,s(s({ref:t},p),{},{components:r})):i.createElement(f,s({ref:t},p))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,s=new Array(a);s[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:n,s[1]=o;for(var c=2;c<a;c++)s[c]=r[c];return i.createElement.apply(null,s)}return i.createElement.apply(null,r)}d.displayName="MDXCreateElement"},4474:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var i=r(7462),n=(r(7294),r(3905));const a={sidebar_label:"IPFS"},s="IPFS Publisher Specification",o={unversionedId:"references/other-specifications/publishers/ipfs",id:"references/other-specifications/publishers/ipfs",title:"IPFS Publisher Specification",description:"The IPFS Publisher in Bacalhau amplifies the versatility of task result storage by integrating with the InterPlanetary File System (IPFS). IPFS is a protocol and network designed to create a peer-to-peer method of storing and sharing hypermedia in a distributed file system. Bacalhau's seamless integration with IPFS ensures that users have a decentralized option for publishing their task results, enhancing accessibility and resilience while reducing dependence on a single point of failure.",source:"@site/docs/references/other-specifications/publishers/ipfs.md",sourceDirName:"references/other-specifications/publishers",slug:"/references/other-specifications/publishers/ipfs",permalink:"/references/other-specifications/publishers/ipfs",draft:!1,editUrl:"https://github.com/bacalhau-project/docs.bacalhau.org/blob/main/docs/references/other-specifications/publishers/ipfs.md",tags:[],version:"current",lastUpdatedAt:1699979881,formattedLastUpdatedAt:"Nov 14, 2023",frontMatter:{sidebar_label:"IPFS"},sidebar:"documentationSidebar",previous:{title:"Publishers",permalink:"/category/publishers"},next:{title:"S3",permalink:"/references/other-specifications/publishers/s3"}},l={},c=[{value:"<code>IPFS</code> Publisher Parameters",id:"ipfs-publisher-parameters",level:2},{value:"Published Result Specification",id:"published-result-specification",level:2},{value:"Result Parameters",id:"result-parameters",level:3}],p={toc:c},u="wrapper";function h(e){let{components:t,...r}=e;return(0,n.kt)(u,(0,i.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"ipfs-publisher-specification"},"IPFS Publisher Specification"),(0,n.kt)("p",null,"The IPFS Publisher in Bacalhau amplifies the versatility of task result storage by integrating with the ",(0,n.kt)("a",{parentName:"p",href:"https://ipfs.tech/"},"InterPlanetary File System (IPFS)"),". IPFS is a protocol and network designed to create a peer-to-peer method of storing and sharing hypermedia in a distributed file system. Bacalhau's seamless integration with IPFS ensures that users have a decentralized option for publishing their task results, enhancing accessibility and resilience while reducing dependence on a single point of failure."),(0,n.kt)("h2",{id:"ipfs-publisher-parameters"},(0,n.kt)("inlineCode",{parentName:"h2"},"IPFS")," Publisher Parameters"),(0,n.kt)("p",null,"For the IPFS publisher, no specific parameters need to be defined in the publisher specification. The user only needs to indicate the publisher type as IPFS, and Bacalhau handles the rest. Here is an example of how to set up an IPFS Publisher in a job specification."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"Publisher:\n  Type: ipfs\n\n")),(0,n.kt)("h2",{id:"published-result-specification"},"Published Result Specification"),(0,n.kt)("p",null,"Once the job is executed, the results are published to IPFS, and a unique CID (Content Identifier) is generated for each file or piece of data. This CID acts as an address to the file in the IPFS network and can be used to access the file globally."),(0,n.kt)("h3",{id:"result-parameters"},"Result Parameters"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"CID ",(0,n.kt)("inlineCode",{parentName:"li"},"(string)"),": This is the unique content identifier generated by IPFS, which can be used to access the published content from anywhere in the world. Every data piece stored on IPFS has its unique CID.\nHere's a sample of how the published result might appear:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},'PublishedResult:\n  Type: ipfs\n  Params:\n    CID: "QmXoypizjW3WknFiJnKLwHCnL72vedxjQkDDP1mXWo6uco"\n')),(0,n.kt)("p",null,"In this example, the task results will be stored in IPFS, and can be referenced and retrieved using the specified CID. This is indicative of Bacalhau's commitment to offering flexible, reliable, and decentralized options for result storage, catering to a diverse set of user needs and preferences."))}h.isMDXComponent=!0}}]);