"use strict";(self.webpackChunkbacalhau_docs=self.webpackChunkbacalhau_docs||[]).push([[1253],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},b=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(n),b=a,m=d["".concat(s,".").concat(b)]||d[b]||u[b]||r;return n?o.createElement(m,l(l({ref:t},c),{},{components:n})):o.createElement(m,l({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=b;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:a,l[1]=i;for(var p=2;p<r;p++)l[p]=n[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}b.displayName="MDXCreateElement"},7498:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var o=n(7462),a=(n(7294),n(3905));const r={sidebar_label:"Job Selection Policy",sidebar_position:140},l="Job selection policy",i={unversionedId:"running-node/job-selection",id:"running-node/job-selection",title:"Job selection policy",description:"When running a node, you can choose which jobs you want to run by using",source:"@site/docs/running-node/job-selection.md",sourceDirName:"running-node",slug:"/running-node/job-selection",permalink:"/running-node/job-selection",draft:!1,editUrl:"https://github.com/bacalhau-project/docs.bacalhau.org/blob/main/docs/running-node/job-selection.md",tags:[],version:"current",lastUpdatedAt:1699979881,formattedLastUpdatedAt:"Nov 14, 2023",sidebarPosition:140,frontMatter:{sidebar_label:"Job Selection Policy",sidebar_position:140},sidebar:"documentationSidebar",previous:{title:"Storage Providers",permalink:"/running-node/storage-providers"},next:{title:"Resource Limits",permalink:"/running-node/resource-limits"}},s={},p=[{value:"Job selection probes",id:"job-selection-probes",level:2}],c={toc:p},d="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"job-selection-policy"},"Job selection policy"),(0,a.kt)("p",null,"When running a node, you can choose which jobs you want to run by using\nconfiguration options, environment variables or flags to specify a job selection\npolicy."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Config property"),(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"th"},"serve")," flag"),(0,a.kt)("th",{parentName:"tr",align:null},"Default value"),(0,a.kt)("th",{parentName:"tr",align:null},"Meaning"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Node.Compute.JobSelection.Locality"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"--job-selection-data-locality")),(0,a.kt)("td",{parentName:"tr",align:null},"Anywhere"),(0,a.kt)("td",{parentName:"tr",align:null},'Only accept jobs that reference data we have locally ("local") or anywhere ("anywhere").')),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Node.Compute.JobSelection.ProbeExec"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"--job-selection-probe-exec")),(0,a.kt)("td",{parentName:"tr",align:null},"unused"),(0,a.kt)("td",{parentName:"tr",align:null},"Use the result of an external program to decide if we should take on the job.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Node.Compute.JobSelection.ProbeHttp"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"--job-selection-probe-http")),(0,a.kt)("td",{parentName:"tr",align:null},"unused"),(0,a.kt)("td",{parentName:"tr",align:null},"Use the result of a HTTP POST to decide if we should take on the job.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Node.Compute.JobSelection.RejectStatelessJobs"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"--job-selection-reject-stateless")),(0,a.kt)("td",{parentName:"tr",align:null},"False"),(0,a.kt)("td",{parentName:"tr",align:null},"Reject jobs that don't specify any ",(0,a.kt)("a",{parentName:"td",href:"/data-ingestion/"},"input data"),".")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Node.Compute.JobSelection.AcceptNetworkedJobs"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"--job-selection-accept-networked")),(0,a.kt)("td",{parentName:"tr",align:null},"False"),(0,a.kt)("td",{parentName:"tr",align:null},"Accept jobs that require ",(0,a.kt)("a",{parentName:"td",href:"/next-steps/networking"},"network connections"),".")))),(0,a.kt)("h2",{id:"job-selection-probes"},"Job selection probes"),(0,a.kt)("p",null,"If you want more control over making the decision to take on jobs, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"--job-selection-probe-exec")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"--job-selection-probe-http")," flags."),(0,a.kt)("p",null,"These are external programs that are passed the following data structure so that they can make a decision about whether or not to take on a job:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "node_id": "XXX",\n  "job_id": "XXX",\n  "spec": {\n    "engine": "docker",\n    "verifier": "ipfs",\n    "job_spec_vm": {\n      "image": "ubuntu:latest",\n      "entrypoint": ["cat", "/file.txt"]\n    },\n    "inputs": [{\n      "engine": "ipfs",\n      "cid": "XXX",\n      "path": "/file.txt"\n    }]\n  }\n}\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"exec")," probe is a script to run that will be given the job data on ",(0,a.kt)("inlineCode",{parentName:"p"},"stdin"),", and must exit with status code 0 if the job should be run."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"http")," probe is a URL to POST the job data to. The job will be rejected if\nthe HTTP request returns a non-positive status code (e.g. >= 400)."),(0,a.kt)("p",null,"If the HTTP response is a JSON blob, it should match the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/bacalhau-project/bacalhau/blob/885d53e93b01fb343294d7ddbdbffe89918db800/pkg/bidstrategy/type.go#L18-L22"},"following\nschema"),"\nand will be used to respond to the bid directly:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "$schema": "http://json-schema.org/draft-04/schema#",\n  "type": "object",\n  "properties": {\n    "shouldBid": {\n      "description": "If the job should be accepted",\n      "type": "boolean"\n    },\n    "shouldWait": {\n      "description": "If the node should wait for an async response that will come later. `shouldBid` will be ignored",\n      "type": "boolean",\n      "default": false,\n    },\n    "reason": {\n      "description": "Human-readable string explaining why the job should be accepted or rejected, or why the wait is required",\n      "type": "string"\n    }\n  },\n  "required": [\n    "shouldBid",\n    "reason"\n  ]\n}\n')),(0,a.kt)("p",null,"For example, the following response will reject the job:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "shouldBid": false,\n  "reason": "The job did not pass this specific validation: ...",\n}\n')),(0,a.kt)("p",null,"If the HTTP response is not a JSON blob, the content is ignored and any non-error status code will accept the job."))}u.isMDXComponent=!0}}]);