"use strict";(self.webpackChunkbacalhau_docs=self.webpackChunkbacalhau_docs||[]).push([[4521],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),p=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(i.Provider,{value:t},e.children)},g="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),g=p(n),d=r,m=g["".concat(i,".").concat(d)]||g[d]||u[d]||o;return n?a.createElement(m,l(l({ref:t},c),{},{components:n})):a.createElement(m,l({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[g]="string"==typeof e?e:r,l[1]=s;for(var p=2;p<o;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},482:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_label:"Setup Fake Log Generation",sidebar_position:2},l="Set up a \u201cfake log creating\u201d job (Optional)",s={unversionedId:"case-studies/duckdb-logs-processing/Fake-Log-Generation/set-up-a-fake-log-creating-job",id:"case-studies/duckdb-logs-processing/Fake-Log-Generation/set-up-a-fake-log-creating-job",title:"Set up a \u201cfake log creating\u201d job (Optional)",description:"Note: these commands are already there in the terraform scripts and this part is for explanation only and is a manual process compared to the automated script",source:"@site/docs/case-studies/duckdb-logs-processing/Fake-Log-Generation/set-up-a-fake-log-creating-job.md",sourceDirName:"case-studies/duckdb-logs-processing/Fake-Log-Generation",slug:"/case-studies/duckdb-logs-processing/Fake-Log-Generation/set-up-a-fake-log-creating-job",permalink:"/case-studies/duckdb-logs-processing/Fake-Log-Generation/set-up-a-fake-log-creating-job",draft:!1,editUrl:"https://github.com/bacalhau-project/docs.bacalhau.org/blob/main/docs/case-studies/duckdb-logs-processing/Fake-Log-Generation/set-up-a-fake-log-creating-job.md",tags:[],version:"current",lastUpdatedAt:1685025044,formattedLastUpdatedAt:"May 25, 2023",sidebarPosition:2,frontMatter:{sidebar_label:"Setup Fake Log Generation",sidebar_position:2},sidebar:"documentationSidebar",previous:{title:"Setup GCP Infrastructure",permalink:"/case-studies/duckdb-logs-processing/Setup-GCP-Infrastructure-Using-Terraform/"},next:{title:"The Bacalhau Job",permalink:"/case-studies/duckdb-logs-processing/The Bacalhau Job/The-Bacalhau-Job"}},i={},p=[{value:"<strong>Step 2: Create the fake log generator script</strong>",id:"step-2-create-the-fake-log-generator-script",level:2},{value:"<strong>Step 3: Download the word list</strong>",id:"step-3-download-the-word-list",level:2},{value:"<strong>Step 4: Create a systemd service</strong>",id:"step-4-create-a-systemd-service",level:2}],c={toc:p},g="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(g,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"set-up-a-fake-log-creating-job-optional"},"Set up a \u201cfake log creating\u201d job (Optional)"),(0,r.kt)("p",null,"Note: these commands are already there in the terraform scripts and this part is for explanation only and is a manual process compared to the automated script"),(0,r.kt)("p",null,"Note you can use your logs"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/js-ts/logrotate\ncd logrotate\nchmod +x ./log-rotate.sh\nsudo ./log-rotate.sh\n")),(0,r.kt)("p",null,"To rotate log files every hour on Ubuntu, you can use the logrotate utility. Follow these steps to configure hourly log rotation:"),(0,r.kt)("p",null,"Install logrotate if it\u2019s not already installed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt-get updatesudo apt-get install logrotate\n")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create a new configuration file for your log file. For example, if your log file is located at ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"/var/log/myapp.log")),", create a new file called ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"/etc/logrotate.d/myapp"))," with the following content:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo nano /etc/logrotate.d/myapp\n")),(0,r.kt)("p",null,"Then, add the following configuration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"/home/<your-username>/logrotate/logs/fake_logs.log {\n    hourly\n    missingok\n    rotate 24\n    compress\n    delaycompress\n    notifempty\n    create 0640 root adm\n    postrotate\n        invoke-rc.d rsyslog rotate > /dev/null\n    endscript\n}\n")),(0,r.kt)("p",null,"This configuration will rotate the log file every hour, keep 24 rotated log files, compress the old log files (except for the most recent one), and create a new log file with the specified permissions."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"In Ubuntu, by default, ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"logrotate"))," is executed daily by the ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"anacron"))," service. To make it run hourly, you need to create a new hourly cron job. Create a new script called ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"logrotate-hourly"))," in ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"/etc/cron.hourly/")),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo nano /etc/cron.hourly/logrotate-hourly\n")),(0,r.kt)("p",null,"Add the following content:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"#!/bin/sh\n/usr/sbin/logrotate --state /var/lib/logrotate/logrotate.hourly.status /etc/logrotate.conf\n")),(0,r.kt)("p",null,"Make the script executable:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo chmod +x /etc/cron.hourly/logrotate-hourly\n")),(0,r.kt)("p",null,"Restart the cron service to apply the changes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo service cron restart\n")),(0,r.kt)("p",null,"Install Python and the necessary libraries:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt-get updatesudo apt-get install python3 pip -ypip install Faker\n")),(0,r.kt)("h2",{id:"step-2-create-the-fake-log-generator-script"},(0,r.kt)("strong",{parentName:"h2"},"Step 2: Create the fake log generator script")),(0,r.kt)("p",null,"Create a file named ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"fake_log_generator.py"))," and add the following code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import json\nimport time\nfrom datetime import datetime\nfrom random import choice, choices\nimport uuid\nfrom faker import Faker\n\nfake = Faker()\n\ndef generate_log_entry():\n    service_names = ["Auth", "AppStack", "Database"]\n    categories = ["[INFO]", "[WARN]", "[CRITICAL]", "[SECURITY]"]\n\n    with open("clean_words_alpha.txt", "r") as word_file:\n        word_list = word_file.read().splitlines()\n\n    log_entry = {\n        "id": str(uuid.uuid4()),\n        "@timestamp": datetime.now().strftime("%Y-%m-%dT%H:%M:%S.%fZ"),\n        "@version": "1.1",\n        "message": f"{choice(service_names)} {choice(categories)} {\' \'.join(choices(word_list, k=5))}",\n    }\n\n    return log_entry\n\ndef main():\n    while True:\n        log_entry = generate_log_entry()\n\n        # Load existing log entries\n        try:\n            with open("fake_logs.log", "r") as log_file:\n                log_entries = json.load(log_file)\n        except (FileNotFoundError, json.JSONDecodeError):\n            log_entries = []\n\n        # Append new log entry and write back to the file\n        log_entries.append(log_entry)\n        with open("fake_logs.log", "w") as log_file:\n            json.dump(log_entries, log_file, indent=2)\n\n        # Sleep for 5 seconds before generating another log entry\n        time.sleep(5)\n\nif __name__ == "__main__":\n    main()\n')),(0,r.kt)("h2",{id:"step-3-download-the-word-list"},(0,r.kt)("strong",{parentName:"h2"},"Step 3: Download the word list")),(0,r.kt)("p",null,"Download the word list and save it as ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"clean_words_alpha.txt"))," in the same directory as the ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"fake_log_generator.py"))," script:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"wget https://github.com/dwyl/english-words/files/3086945/clean_words_alpha.txt\n")),(0,r.kt)("h2",{id:"step-4-create-a-systemd-service"},(0,r.kt)("strong",{parentName:"h2"},"Step 4: Create a systemd service")),(0,r.kt)("p",null,"Create a file named ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"fake-log-generator.service"))," with the following content:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-makefile"},"[Unit]\nDescription=Generate fake logs\nAfter=network.target\n\n[Service]\nUser=<your-username>\nWorkingDirectory=/home/<your-username>/logrotate\nExecStart=/usr/bin/python3 fake_log_generator.py -d logs/\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\n")),(0,r.kt)("p",null,"Make sure to replace ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"/path/to"))," with the absolute path to the directory containing the ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"fake_log_generator.py"))," script."),(0,r.kt)("p",null,"Reload the systemd daemon, enable, and start the service:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl daemon-reload\nsudo systemctl enable fake_log_generator.service\nsudo systemctl start fake_log_generator.service\n")),(0,r.kt)("p",null,"Now the fake log generator script will run reliably as a systemd service, creating log entries in the ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"fake_logs.log"))," file every 5 seconds."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"export BACALHAU_LOCAL_DIRECTORY_ALLOW_LIST=/home/<your-username>/logrotate/logs\n")))}u.isMDXComponent=!0}}]);