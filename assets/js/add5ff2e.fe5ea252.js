"use strict";(self.webpackChunkbacalhau_docs=self.webpackChunkbacalhau_docs||[]).push([[2114],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>k});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var p=n.createContext({}),m=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},s=function(e){var t=m(e.components);return n.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,i=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),d=m(a),c=l,k=d["".concat(p,".").concat(c)]||d[c]||u[c]||i;return a?n.createElement(k,r(r({ref:t},s),{},{components:a})):n.createElement(k,r({ref:t},s))}));function k(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=a.length,r=new Array(i);r[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[d]="string"==typeof e?e:l,r[1]=o;for(var m=2;m<i;m++)r[m]=a[m];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},8868:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>m});var n=a(7462),l=(a(7294),a(3905));const i={sidebar_label:"list"},r="Command: node list",o={unversionedId:"references/cli/node/list/index",id:"references/cli/node/list/index",title:"Command: node list",description:"The bacalhau node list command is designed to provide users with a comprehensive list of network nodes along with details based on specified flags.",source:"@site/docs/references/cli/node/list/index.md",sourceDirName:"references/cli/node/list",slug:"/references/cli/node/list/",permalink:"/references/cli/node/list/",draft:!1,editUrl:"https://github.com/bacalhau-project/docs.bacalhau.org/blob/main/docs/references/cli/node/list/index.md",tags:[],version:"current",lastUpdatedAt:1695912575,formattedLastUpdatedAt:"Sep 28, 2023",frontMatter:{sidebar_label:"list"},sidebar:"documentationSidebar",previous:{title:"describe",permalink:"/references/cli/node/describe/"},next:{title:"Job",permalink:"/references/job-specification/job"}},p={},m=[{value:"Description:",id:"description",level:2},{value:"Usage:",id:"usage",level:2},{value:"Flags:",id:"flags",level:2},{value:"Global Flags:",id:"global-flags",level:2},{value:"Examples",id:"examples",level:2}],s={toc:m},d="wrapper";function u(e){let{components:t,...a}=e;return(0,l.kt)(d,(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"command-node-list"},"Command: ",(0,l.kt)("inlineCode",{parentName:"h1"},"node list")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"bacalhau node list")," command is designed to provide users with a comprehensive list of network nodes along with details based on specified flags."),(0,l.kt)("h2",{id:"description"},"Description:"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"list")," sub-command under the ",(0,l.kt)("inlineCode",{parentName:"p"},"bacalhau node")," category enumerates information about nodes in the network. It supports various filtering, ordering, and output formatting options, allowing users to tailor the output to their needs."),(0,l.kt)("h2",{id:"usage"},"Usage:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"bacalhau node list [flags]\n")),(0,l.kt)("h2",{id:"flags"},"Flags:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"-h"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"--help"),":"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Show the help message for the ",(0,l.kt)("inlineCode",{parentName:"li"},"list")," command."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"--hide-header"),":"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Do not display the column headers in the output."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"--labels string"),":"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Filter nodes based on labels. This follows the filtering format provided by Kubernetes, as shown in their documentation about labels."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"--limit uint32"),":"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Restrict the number of results displayed."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"--next-token string"),":"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Provide the next token for pagination."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"--no-style"),":"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Output the table without any style."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"--order-by string"),":"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Sort the results based on a specific field. Valid sorting fields are: ",(0,l.kt)("inlineCode",{parentName:"li"},"id"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"type"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"available_cpu"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"available_memory"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"available_disk"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"available_gpu"),"."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"--order-reversed"),":"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Display the results in reverse order."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"--output format"),":"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Choose the output format. Available options: ",(0,l.kt)("inlineCode",{parentName:"li"},"table"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"csv"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"json"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"yaml"),"."),(0,l.kt)("li",{parentName:"ul"},"Default: ",(0,l.kt)("inlineCode",{parentName:"li"},"table"),"."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"--pretty"),":"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Enhance the visual appeal of the output. This is applicable only to ",(0,l.kt)("inlineCode",{parentName:"li"},"json")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"yaml")," formats."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"--show strings"),":"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Determine the column groups to be displayed. Acceptable values are: ",(0,l.kt)("inlineCode",{parentName:"li"},"labels"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"version"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"features"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"capacity"),"."),(0,l.kt)("li",{parentName:"ul"},"Default: ",(0,l.kt)("inlineCode",{parentName:"li"},"labels"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"capacity"),"."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"--wide"),":"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Display full values in the output table, without truncation.")))),(0,l.kt)("h2",{id:"global-flags"},"Global Flags:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"--api-host string"),":"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Specify the host for client-server communication via REST. This gets ignored if the ",(0,l.kt)("inlineCode",{parentName:"li"},"BACALHAU_API_HOST")," environment variable is defined."),(0,l.kt)("li",{parentName:"ul"},"Default: ",(0,l.kt)("inlineCode",{parentName:"li"},'"bootstrap.production.bacalhau.org"'),"."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"--api-port int"),":"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Specify the port for RESTful communication between client and server. Gets overlooked if the ",(0,l.kt)("inlineCode",{parentName:"li"},"BACALHAU_API_PORT")," environment variable is set."),(0,l.kt)("li",{parentName:"ul"},"Default: ",(0,l.kt)("inlineCode",{parentName:"li"},"1234"),"."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"--log-mode logging-mode"),":"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Choose the desired log format."),(0,l.kt)("li",{parentName:"ul"},"Options: ",(0,l.kt)("inlineCode",{parentName:"li"},"'default', 'station', 'json', 'combined', 'event'"),"."),(0,l.kt)("li",{parentName:"ul"},"Default: ",(0,l.kt)("inlineCode",{parentName:"li"},"'default'"),"."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"--repo string"),":"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Point to the directory path of the bacalhau repository."),(0,l.kt)("li",{parentName:"ul"},"Default: ",(0,l.kt)("inlineCode",{parentName:"li"},'"'),'$HOME/.bacalhau"`.')))),(0,l.kt)("h2",{id:"examples"},"Examples"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Retrieve the list of nodes"),":"),(0,l.kt)("p",{parentName:"li"},"Execute the command to get a list of all nodes:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"bacalhau node list\n")),(0,l.kt)("p",{parentName:"li"},"Expected output:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-plaintext"}," ID        TYPE     LABELS                                              CPU     MEMORY      DISK         GPU\n QmTSJgdN  Compute  Architecture=amd64 Operating-System=linux           3.2 /   11.7 GB /   77.8 GB /    1 /\n                    git-lfs=True owner=bacalhau                         3.2     11.7 GB     77.8 GB      1\n QmVXwmdZ  Compute  Architecture=amd64 Operating-System=linux           3.2 /   12.5 GB /   77.8 GB /    0 /\n                    git-lfs=True owner=bacalhau                         3.2     12.5 GB     77.8 GB      0\n QmXRdLru  Compute  Architecture=amd64 Operating-System=linux           3.2 /   12.5 GB /   78.0 GB /    0 /\n                    git-lfs=True owner=bacalhau                         3.2     12.5 GB     78.0 GB      0\n ... [Additional nodes information] ...\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Filter the list of nodes by labels"),":"),(0,l.kt)("p",{parentName:"li"},"Execute the command to get a list of nodes with specific labels:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'bacalhau node list --labels "Operating-System=linux,owner=bacalhau"\n')),(0,l.kt)("p",{parentName:"li"},"Expected output:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-plaintext"},"ID        TYPE     LABELS                                              CPU     MEMORY      DISK         GPU\nQmTSJgdN  Compute  Architecture=amd64 Operating-System=linux           3.2 /   11.7 GB /   77.8 GB /    1 /\n                   git-lfs=True owner=bacalhau                         3.2     11.7 GB     77.8 GB      1\n... [Additional nodes information] ...\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Order the list of nodes by available memory"),":"),(0,l.kt)("p",{parentName:"li"},"Execute the command to get the list of nodes ordered by available memory:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"bacalhau node list --order-by available_memory\n")),(0,l.kt)("p",{parentName:"li"},"Expected output:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-plaintext"},"ID        TYPE     LABELS                                              CPU     MEMORY      DISK         GPU\nQmVXwmdZ  Compute  Architecture=amd64 Operating-System=linux           3.2 /   12.5 GB /   77.8 GB /    0 /\n                   git-lfs=True owner=bacalhau                         3.2     12.5 GB     77.8 GB      0\n... [Additional nodes information] ...\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Limit the number of nodes displayed and output in JSON format"),":"),(0,l.kt)("p",{parentName:"li"},"Execute the command to get a limited list of nodes in JSON format:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"bacalhau node list  --limit 3 --output json --pretty\n")),(0,l.kt)("p",{parentName:"li"},"Expected output:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "PeerInfo": {\n      "ID": "QmTSJgdN7zCPAqBCkmdsdpFbiJV8bJ6zhoxK9N5xfar1sz",\n      ... [Additional node details] ...\n    },\n    ... [Other nodes] ...\n  }\n]\n')))))}u.isMDXComponent=!0}}]);