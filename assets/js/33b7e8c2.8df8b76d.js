"use strict";(self.webpackChunkbacalhau_docs=self.webpackChunkbacalhau_docs||[]).push([[4875],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=a.createContext({}),s=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,u=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=s(n),d=o,h=m["".concat(u,".").concat(d)]||m[d]||p[d]||r;return n?a.createElement(h,l(l({ref:t},c),{},{components:n})):a.createElement(h,l({ref:t},c))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=m;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var s=2;s<r;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5385:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>s});var a=n(7462),o=(n(7294),n(3905));const r={},l="Running Genomics on bacalhau",i={unversionedId:"examples/miscellaneous/Genomics/index",id:"examples/miscellaneous/Genomics/index",title:"Running Genomics on bacalhau",description:"Open In Colab",source:"@site/docs/examples/miscellaneous/Genomics/index.md",sourceDirName:"examples/miscellaneous/Genomics",slug:"/examples/miscellaneous/Genomics/",permalink:"/examples/miscellaneous/Genomics/",draft:!1,editUrl:"https://github.com/bacalhau-project/docs.bacalhau.org/blob/main/docs/examples/miscellaneous/Genomics/index.md",tags:[],version:"current",lastUpdatedAt:1675639573,formattedLastUpdatedAt:"Feb 5, 2023",frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Coresets On Bacalhau",permalink:"/examples/miscellaneous/Coreset/"},next:{title:"Molecular Dynamics with Bacalhau",permalink:"/examples/miscellaneous/Gromacs/"}},u={},s=[{value:"Setting up Docker",id:"setting-up-docker",level:2},{value:"Running the Container on Bacalhau",id:"running-the-container-on-bacalhau",level:2},{value:"Checking the State of your Jobs",id:"checking-the-state-of-your-jobs",level:2},{value:"Viewing your Job Output",id:"viewing-your-job-output",level:2}],c={toc:s};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"running-genomics-on-bacalhau"},"Running Genomics on bacalhau"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://colab.research.google.com/github/bacalhau-project/examples/blob/main/Genomics/BIDS/index.ipynb"},(0,o.kt)("img",{parentName:"a",src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Colab"})),"\n",(0,o.kt)("a",{parentName:"p",href:"https://mybinder.org/v2/gh/bacalhau-project/examples/HEAD?labpath=miscellaneous/Genomics/index.ipynb"},(0,o.kt)("img",{parentName:"a",src:"https://mybinder.org/badge.svg",alt:"Open In Binder"}))),(0,o.kt)("h1",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"Kipoi ",(0,o.kt)("em",{parentName:"p"},"(pronounce: k\xedpi; from the Greek \u03ba\u03ae\u03c0\u03bf\u03b9: gardens)")," is an API and a repository of ready-to-use trained models for genomics. It currently contains 2201 different models, covering canonical predictive tasks in transcriptional and post-transcriptional gene regulation. Kipoi's API is implemented as a ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/kipoi/kipoi"},"python package")," and it is also accessible from the command line."),(0,o.kt)("h2",{id:"setting-up-docker"},"Setting up Docker"),(0,o.kt)("p",null,"To set up Docker, you'll need to:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Create a ",(0,o.kt)("inlineCode",{parentName:"li"},"Dockerfile"),". The Dockerfile is a text document that contains the commands used to assemble the image."),(0,o.kt)("li",{parentName:"ul"},"Add your desired configuration to the ",(0,o.kt)("inlineCode",{parentName:"li"},"Dockerfile"),". These commands specify how the image will be built, and what extra requirements will be included.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'FROM kipoi/kipoi-veff2:py37\n\nRUN kipoi_veff2_predict ./examples/input/test.vcf ./examples/input/test.fa ./output.tsv -m "DeepSEA/predict" -s "diff" -s "logit"\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Next, we will use the ",(0,o.kt)("inlineCode",{parentName:"p"},"python:3.8")," docker image to build the docker container to download the models and weights. Before running the command below, replace:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"hub-user")," with your docker hub username. If you don\u2019t have a docker hub account follow these ",(0,o.kt)("a",{parentName:"p",href:"https://docs.docker.com/docker-id/"},"instructions")," to create docker account and use the username of the account you created")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"repo-name")," with the name of the container, you can name it anything you want")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"tag")," with the latest tag (optional)"))))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"docker build -t <hub-user>/<repo-name>:<tag>\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Push the repository to the designated registry in Docker hub by using its name or tag.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"}," docker push <hub-user>/<repo-name>:<tag>\n")),(0,o.kt)("p",null,"After the repo image has been pushed to docker hub, we can now use run the container on Bacalhau"),(0,o.kt)("h2",{id:"running-the-container-on-bacalhau"},"Running the Container on Bacalhau"),(0,o.kt)("p",null,"To run your Docker container on Bacalhau. First;"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Install bacalhau")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"curl -sL https://get.bacalhau.org/install.sh | bash\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"To get your Bacalhau job id, run the following command:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'bacalhau docker run \\\n--id-only \\\n--wait \\ \n--timeout 3600 \\\n--wait-timeout-secs 3600 \\\njsacex/kipoi-veff2:py37 \\\n-- kipoi_veff2_predict ./examples/input/test.vcf ./examples/input/test.fa ../outputs/output.tsv -m "DeepSEA/predict" -s "diff" -s "logit"\n')),(0,o.kt)("p",null,"Running the command above will output a UUID (like ",(0,o.kt)("inlineCode",{parentName:"p"},"54506541-4eb9-45f4-a0b1-ea0aecd34b3e"),"). This is the ID of the job that was created. "),(0,o.kt)("p",null,"You can use an enviromental variable to store your Job ID"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"%env JOB_ID={job_id}\n")),(0,o.kt)("h2",{id:"checking-the-state-of-your-jobs"},"Checking the State of your Jobs"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Job status"),": You can check the status of the job with the following command:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"bacalhau list --id-filter ${JOB_ID} --wide\n")),(0,o.kt)("p",null,"When it says ",(0,o.kt)("inlineCode",{parentName:"p"},"Published"),", that means the job is done, and we can get the results. "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Job information"),": To find out more information about your job, run the following command:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"bacalhau describe ${JOB_ID}\n")),(0,o.kt)("p",null,"When there is no error, the state of our job  will be complete which means you can download the results."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Download job results"),": You can download your job results directly by using ",(0,o.kt)("inlineCode",{parentName:"li"},"bacalhau get"),". You can also choose to create a directory to store your results. In the command below, we created a directory and downloaded our job output to be stored in that directory.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"rm -rf results && mkdir -p results\nbacalhau get $JOB_ID --output-dir results\n")),(0,o.kt)("p",null,"After the download has finished you should see the following contents in ",(0,o.kt)("em",{parentName:"p"},"results")," directory."),(0,o.kt)("h2",{id:"viewing-your-job-output"},"Viewing your Job Output"),(0,o.kt)("p",null,"To view your output, run the following command:  "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"ls results/\n")),(0,o.kt)("p",null,"Each job creates 3 subfolders: the ",(0,o.kt)("strong",{parentName:"p"},"combined_results"),", ",(0,o.kt)("strong",{parentName:"p"},"per_shard")," files, and the ",(0,o.kt)("strong",{parentName:"p"},"raw")," directory. "),(0,o.kt)("p",null,"In each of these sub_folders, you'll find the ",(0,o.kt)("strong",{parentName:"p"},"studout")," and ",(0,o.kt)("strong",{parentName:"p"},"stderr")," file."),(0,o.kt)("p",null,"To view the file in the ",(0,o.kt)("em",{parentName:"p"},"stdout")," folder, run the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cat results/job-id/combined_results/stdout\n")))}p.isMDXComponent=!0}}]);