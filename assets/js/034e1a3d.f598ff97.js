"use strict";(self.webpackChunkbacalhau_docs=self.webpackChunkbacalhau_docs||[]).push([[2538],{8094:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var a=t(5893),i=t(1151);const o={sidebar_label:"Training-Pytorch-Model",sidebar_position:2},s="Training Pytorch Model with Bacalhau",r={id:"examples/model-training/Training-Pytorch-Model/index",title:"Training Pytorch Model with Bacalhau",description:"stars - badge-generator",source:"@site/docs/examples/model-training/Training-Pytorch-Model/index.md",sourceDirName:"examples/model-training/Training-Pytorch-Model",slug:"/examples/model-training/Training-Pytorch-Model/",permalink:"/examples/model-training/Training-Pytorch-Model/",draft:!1,unlisted:!1,editUrl:"https://github.com/bacalhau-project/docs.bacalhau.org/blob/main/docs/examples/model-training/Training-Pytorch-Model/index.md",tags:[],version:"current",lastUpdatedAt:1700797095,formattedLastUpdatedAt:"Nov 24, 2023",sidebarPosition:2,frontMatter:{sidebar_label:"Training-Pytorch-Model",sidebar_position:2},sidebar:"documentationSidebar",previous:{title:"Stable-Diffusion-Dreambooth",permalink:"/examples/model-training/Stable-Diffusion-Dreambooth/"},next:{title:"Training-Tensorflow-Model",permalink:"/examples/model-training/Training-Tensorflow-Model/"}},l={},d=[{value:"TD;LR",id:"tdlr",level:2},{value:"Prerequisite",id:"prerequisite",level:2},{value:"Training the Model Locally",id:"training-the-model-locally",level:2},{value:"Uploading Dataset to IPFS",id:"uploading-dataset-to-ipfs",level:2},{value:"Running a Bacalhau Job",id:"running-a-bacalhau-job",level:2},{value:"Structure  of the command",id:"structure--of-the-command",level:3},{value:"Checking the State of your Jobs",id:"checking-the-state-of-your-jobs",level:2},{value:"Viewing your Job Output",id:"viewing-your-job-output",level:2}];function h(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"training-pytorch-model-with-bacalhau",children:"Training Pytorch Model with Bacalhau"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://github.com/bacalhau-project/bacalhau",children:(0,a.jsx)(n.img,{src:"https://img.shields.io/github/stars/bacalhau-project/bacalhau?style=social",alt:"stars - badge-generator"})})}),"\n",(0,a.jsx)(n.p,{children:"In this example tutorial, we will show you how to train a Pytorch RNN MNIST neural network model with Bacalhau. PyTorch is a framework developed by Facebook AI Research for deep learning, featuring both beginner-friendly debugging tools and a high level of customization for advanced users, with researchers and practitioners using it across companies like Facebook and Tesla. Applications include computer vision, natural language processing, cryptography, and more."}),"\n",(0,a.jsx)(n.h2,{id:"tdlr",children:"TD;LR"}),"\n",(0,a.jsx)(n.p,{children:"Running any type of Pytorch model with Bacalhau"}),"\n",(0,a.jsx)(n.h2,{id:"prerequisite",children:"Prerequisite"}),"\n",(0,a.jsxs)(n.p,{children:["To get started, you need to install the Bacalhau client, see more information ",(0,a.jsx)(n.a,{href:"https://docs.bacalhau.org/getting-started/installation",children:"here"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"!command -v bacalhau >/dev/null 2>&1 || (export BACALHAU_INSTALL_DIR=.; curl -sL https://get.bacalhau.org/install.sh | bash)\npath=!echo $PATH\n%env PATH=./:{path[0]}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"training-the-model-locally",children:"Training the Model Locally"}),"\n",(0,a.jsxs)(n.p,{children:["To train our model locally, we will start by cloning the Pytorch examples ",(0,a.jsx)(n.a,{href:"https://github.com/pytorch/examples",children:"repo"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"%%bash\ngit clone https://github.com/pytorch/examples\n"})}),"\n",(0,a.jsx)(n.p,{children:"Install the following"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"%%bash\npip install torch\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"%%bash\npip install torchvision\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Next, we run the command below to begin the training of the ",(0,a.jsx)(n.em,{children:"mnist_rnn"})," model. We added the ",(0,a.jsx)(n.code,{children:"--save-model"})," flag to save the model"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"%%bash\npython ./examples/mnist_rnn/main.py --save-model\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Next, the downloaded MNIST dataset is saved in the ",(0,a.jsx)(n.code,{children:"data"})," folder."]}),"\n",(0,a.jsx)(n.h2,{id:"uploading-dataset-to-ipfs",children:"Uploading Dataset to IPFS"}),"\n",(0,a.jsxs)(n.p,{children:['Now that we have downloaded our dataset, the next step is to upload it to IPFS. The simplest way to upload the data to IPFS is to use a third-party service to "pin" data to the IPFS network, to ensure that the data exists and is available. To do this you need an account with a pinning service like ',(0,a.jsx)(n.a,{href:"https://web3.storage/",children:"web3.storage"})," or ",(0,a.jsx)(n.a,{href:"https://pinata.cloud/",children:"Pinata"})," or ",(0,a.jsx)(n.a,{href:"https://nft.storage/",children:"NFT.Storage"}),". Once registered you can use their UI or API or SDKs to upload files."]}),"\n",(0,a.jsxs)(n.p,{children:["Once you have uploaded your data, you'll be finished copying the CID. Here is the dataset we have uploaded ",(0,a.jsx)(n.a,{href:"https://gateway.pinata.cloud/ipfs/QmdeQjz1HQQdT9wT2NHX86Le9X6X6ySGxp8dfRUKPtgziw/?filename=data",children:"https://gateway.pinata.cloud/ipfs/QmdeQjz1HQQdT9wT2NHX86Le9X6X6ySGxp8dfRUKPtgziw/?filename=data"})]}),"\n",(0,a.jsx)(n.h2,{id:"running-a-bacalhau-job",children:"Running a Bacalhau Job"}),"\n",(0,a.jsx)(n.p,{children:"After the repo image has been pushed to Docker Hub, we can now use the container for running on Bacalhau. To submit a job, run the following Bacalhau command:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"%%bash --out job_id\nbacalhau docker run \\\n--gpu 1 \\\n--timeout 3600 \\\n--wait-timeout-secs 3600 \\\n--wait \\\n--id-only \\\npytorch/pytorch \\\n-w /outputs \\\n -i ipfs://QmdeQjz1HQQdT9wT2NHX86Le9X6X6ySGxp8dfRUKPtgziw:/data \\\n-i https://raw.githubusercontent.com/pytorch/examples/main/mnist_rnn/main.py \\\n-- python ../inputs/main.py --save-model\n"})}),"\n",(0,a.jsx)(n.h3,{id:"structure--of-the-command",children:"Structure  of the command"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"bacalhau docker run"}),": call to bacalhau"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"--gpu 1"}),": Request 1 GPU to train the model"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"pytorch/pytorch"}),": Using the official pytorch Docker image"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"-i ipfs://QmdeQjz1HQQd....."}),": Mounting the uploaded dataset to the path"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"-i https://raw.githubusercontent.com/py.........."}),": Mounting our training script we will use the URL to this ",(0,a.jsx)(n.a,{href:"https://github.com/pytorch/examples/blob/main/mnist_rnn/main.py",children:"Pytorch example"})]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"-w /outputs:"})," Our working directory is /outputs. This is the folder where we will save the model as it will automatically get uploaded to IPFS as outputs"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"python ../inputs/main.py --save-model"}),": URL script gets mounted to the /inputs folder in the container."]}),"\n",(0,a.jsxs)(n.p,{children:["When a job is submitted, Bacalhau prints out the related ",(0,a.jsx)(n.code,{children:"job_id"}),". We store that in an environment variable so that we can reuse it later on."]}),"\n",(0,a.jsx)(n.h2,{id:"checking-the-state-of-your-jobs",children:"Checking the State of your Jobs"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Job status"}),": You can check the status of the job using ",(0,a.jsx)(n.code,{children:"bacalhau list"}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"%%bash\nbacalhau list --id-filter ${JOB_ID}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["When it says ",(0,a.jsx)(n.code,{children:"Completed"}),", that means the job is done, and we can get the results."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Job information"}),": You can find out more information about your job by using ",(0,a.jsx)(n.code,{children:"bacalhau describe"}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"%%bash\nbacalhau describe ${JOB_ID}\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Job download"}),": You can download your job results directly by using ",(0,a.jsx)(n.code,{children:"bacalhau get"}),". Alternatively, you can choose to create a directory to store your results. In the command below, we created a directory and downloaded our job output to be stored in that directory."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"%%bash\nrm -rf results && mkdir -p results\nbacalhau get $JOB_ID --output-dir results\n"})}),"\n",(0,a.jsx)(n.p,{children:"After the download has finished you should see the following contents in the results directory"}),"\n",(0,a.jsx)(n.h2,{id:"viewing-your-job-output",children:"Viewing your Job Output"}),"\n",(0,a.jsx)(n.p,{children:"To view the file, run the following command:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"%%bash\nls results/ # list the contents of the current directory \ncat results/stdout # displays the contents of the file given to it as a parameter.\nls results/outputs/ # list the successfully trained model\n"})})]})}function c(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>s});var a=t(7294);const i={},o=a.createContext(i);function s(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);