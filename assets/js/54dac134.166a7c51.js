"use strict";(self.webpackChunkbacalhau_docs=self.webpackChunkbacalhau_docs||[]).push([[4772],{1367:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var a=n(5893),r=n(1151);const s={sidebar_label:"Update Checking",sidebar_position:6},c="Automatic Update Checking",i={id:"next-steps/update-checks",title:"Automatic Update Checking",description:"Bacalhau has an update checking service to automatically detect whether a newer version of the software is available.",source:"@site/docs/next-steps/update-checks.md",sourceDirName:"next-steps",slug:"/next-steps/update-checks",permalink:"/next-steps/update-checks",draft:!1,unlisted:!1,editUrl:"https://github.com/bacalhau-project/docs.bacalhau.org/blob/main/docs/next-steps/update-checks.md",tags:[],version:"current",lastUpdatedAt:1702252086,formattedLastUpdatedAt:"Dec 10, 2023",sidebarPosition:6,frontMatter:{sidebar_label:"Update Checking",sidebar_position:6},sidebar:"documentationSidebar",previous:{title:"Private Cluster",permalink:"/next-steps/private-cluster"},next:{title:"Running a Node",permalink:"/running-node"}},o={},d=[{value:"For clients",id:"for-clients",level:2},{value:"For node operators",id:"for-node-operators",level:2},{value:"Configuring checks",id:"configuring-checks",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"automatic-update-checking",children:"Automatic Update Checking"}),"\n",(0,a.jsx)(t.p,{children:"Bacalhau has an update checking service to automatically detect whether a newer version of the software is available."}),"\n",(0,a.jsx)(t.p,{children:"Users who are both running CLI commands and operating nodes will be regularly informed that a new release can be downloaded and installed."}),"\n",(0,a.jsx)(t.p,{children:"By default, an update check will run no more than once every 24 hours. Users can opt out of automatic update checks using the configuration described below."}),"\n",(0,a.jsx)(t.h2,{id:"for-clients",children:"For clients"}),"\n",(0,a.jsx)(t.p,{children:"Bacalhau will run an update check regularly when client commands are executed. If an update is available, explanatory text will be printed at the end of the command."}),"\n",(0,a.jsxs)(t.p,{children:["To force a manual update check, run the ",(0,a.jsx)(t.code,{children:"bacalhau version"})," command which will explicitly list the latest software release alongside the server and client versions."]}),"\n",(0,a.jsx)(t.h2,{id:"for-node-operators",children:"For node operators"}),"\n",(0,a.jsx)(t.p,{children:"Bacalhau will run an update check regularly as part of the normal operation of the node."}),"\n",(0,a.jsx)(t.p,{children:"If an update is available, an INFO level message will be printed to the log."}),"\n",(0,a.jsx)(t.h2,{id:"configuring-checks",children:"Configuring checks"}),"\n",(0,a.jsx)(t.p,{children:"Bacalhau has some configuration options for controlling how often checks are performed:"}),"\n",(0,a.jsxs)(t.table,{children:[(0,a.jsx)(t.thead,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.th,{children:"Config property"}),(0,a.jsx)(t.th,{children:"Environment variable"}),(0,a.jsx)(t.th,{children:"Default value"}),(0,a.jsx)(t.th,{children:"Meaning"})]})}),(0,a.jsxs)(t.tbody,{children:[(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"Update.SkipChecks"}),(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"BACALHAU_UPDATE_SKIPCHECKS"})}),(0,a.jsx)(t.td,{children:"False"}),(0,a.jsxs)(t.td,{children:["If true, no update checks will be performed. As an environment variable, set to ",(0,a.jsx)(t.code,{children:'"1"'}),", ",(0,a.jsx)(t.code,{children:'"t"'})," or ",(0,a.jsx)(t.code,{children:'"true"'}),"."]})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"Update.CheckFrequency"}),(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"BACALHAU_UPDATE_CHECKFREQUENCY"})}),(0,a.jsx)(t.td,{children:"24 hours"}),(0,a.jsxs)(t.td,{children:["The minimum amount of time between automated update checks. Set as any duration of hours, minutes or seconds, e.g. ",(0,a.jsx)(t.code,{children:"24h"})," or ",(0,a.jsx)(t.code,{children:"10m"}),"."]})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"Update.CheckStatePath"}),(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"BACALHAU_UPDATE_CHECKSTATEPATH"})}),(0,a.jsx)(t.td,{children:"$BACALHAU_DIR/update.json"}),(0,a.jsx)(t.td,{children:"An absolute path where Bacalhau should store the date and time of the last check."})]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>i,a:()=>c});var a=n(7294);const r={},s=a.createContext(r);function c(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);