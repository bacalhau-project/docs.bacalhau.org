"use strict";(self.webpackChunkbacalhau_docs=self.webpackChunkbacalhau_docs||[]).push([[1410],{9728:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>d});var s=i(5893),t=i(1151);const a={sidebar_label:"Video Processing",sidebar_position:6,description:"Parallel Video Resizing via File Sharding"},o="Video Processing",r={id:"examples/data-engineering/simple-parallel-workloads/index",title:"Video Processing",description:"Parallel Video Resizing via File Sharding",source:"@site/docs/examples/data-engineering/simple-parallel-workloads/index.md",sourceDirName:"examples/data-engineering/simple-parallel-workloads",slug:"/examples/data-engineering/simple-parallel-workloads/",permalink:"/examples/data-engineering/simple-parallel-workloads/",draft:!1,unlisted:!1,editUrl:"https://github.com/bacalhau-project/docs.bacalhau.org/blob/main/docs/examples/data-engineering/simple-parallel-workloads/index.md",tags:[],version:"current",lastUpdatedAt:1701669642,formattedLastUpdatedAt:"Dec 4, 2023",sidebarPosition:6,frontMatter:{sidebar_label:"Video Processing",sidebar_position:6,description:"Parallel Video Resizing via File Sharding"},sidebar:"documentationSidebar",previous:{title:"Oceanography - Data Conversion",permalink:"/examples/data-engineering/oceanography-conversion/"},next:{title:"Model Inference",permalink:"/category/model-inference"}},l={},d=[{value:"TD;LR",id:"tdlr",level:2},{value:"Prerequisite",id:"prerequisite",level:2},{value:"Submit the workload",id:"submit-the-workload",level:2},{value:"Checking the State of your Jobs",id:"checking-the-state-of-your-jobs",level:2},{value:"Viewing your Job Output",id:"viewing-your-job-output",level:2},{value:"Display the videos",id:"display-the-videos",level:3},{value:"Need Support?",id:"need-support",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"video-processing",children:"Video Processing"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github.com/bacalhau-project/bacalhau",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/github/stars/bacalhau-project/bacalhau?style=social",alt:"stars - badge-generator"})})}),"\n",(0,s.jsx)(n.p,{children:"Many data engineering workloads consist of embarrassingly parallel workloads where you want to run a simple execution on a large number of files. In this example tutorial, we will run a simple video filter on a large number of video files."}),"\n",(0,s.jsx)(n.h2,{id:"tdlr",children:"TD;LR"}),"\n",(0,s.jsx)(n.p,{children:"Running video files with Bacalhau"}),"\n",(0,s.jsx)(n.h2,{id:"prerequisite",children:"Prerequisite"}),"\n",(0,s.jsxs)(n.p,{children:["To get started, you need to install the Bacalhau client, see more information ",(0,s.jsx)(n.a,{href:"https://docs.bacalhau.org/getting-started/installation",children:"here"})]}),"\n",(0,s.jsx)(n.h2,{id:"submit-the-workload",children:"Submit the workload"}),"\n",(0,s.jsxs)(n.p,{children:["To submit a workload to Bacalhau, we will use the ",(0,s.jsx)(n.code,{children:"bacalhau docker run"})," command."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'%%bash --out job_id\nbacalhau docker run \\\n  --wait \\\n  --wait-timeout-secs 100 \\\n  --id-only \\\n  -i ipfs://Qmd9CBYpdgCLuCKRtKRRggu24H72ZUrGax5A9EYvrbC72j:/inputs \\\n  linuxserver/ffmpeg -- \\\n  bash -c \'find /inputs -iname "*.mp4" -printf "%f\\n" | xargs -I{} ffmpeg -y -i /inputs/{} -vf "scale=-1:72,setsar=1:1" /outputs/scaled_{}\'\n\n'})}),"\n",(0,s.jsx)(n.p,{children:"The job has been submitted and Bacalhau has printed out the related job id. We store that in an environment variable so that we can reuse it later on."}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"bacalhau docker run"})," command allows one to pass input data volume with a ",(0,s.jsx)(n.code,{children:"-i ipfs://CID:path"})," argument just like Docker, except the left-hand side of the argument is a ",(0,s.jsx)(n.a,{href:"https://github.com/multiformats/cid",children:"content identifier (CID)"}),". This results in Bacalhau mounting a ",(0,s.jsx)(n.em,{children:"data volume"})," inside the container. By default, Bacalhau mounts the input volume at the path ",(0,s.jsx)(n.code,{children:"/inputs"})," inside the container."]}),"\n",(0,s.jsxs)(n.p,{children:["We created a 72px wide video thumbnails for all the videos in the ",(0,s.jsx)(n.code,{children:"inputs"})," directory. The ",(0,s.jsx)(n.code,{children:"outputs"})," directory will contain the thumbnails for each video. We will shard by 1 video per job, and use the ",(0,s.jsx)(n.code,{children:"linuxserver/ffmpeg"})," container to resize the videos."]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://github.com/filecoin-project/bacalhau/blob/v0.2.3/cmd/bacalhau/docker_run.go#L64",children:"Bacalhau overwrites the default entrypoint"})," so we must run the full command after the ",(0,s.jsx)(n.code,{children:"--"})," argument. In this line you will list all of the mp4 files in the ",(0,s.jsx)(n.code,{children:"/inputs"})," directory and execute ",(0,s.jsx)(n.code,{children:"ffmpeg"})," against each instance."]})}),"\n",(0,s.jsx)(n.h2,{id:"checking-the-state-of-your-jobs",children:"Checking the State of your Jobs"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Job status"}),": You can check the status of the job using ",(0,s.jsx)(n.code,{children:"bacalhau list"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"%%bash\nbacalhau list --id-filter=${JOB_ID} --no-style\n"})}),"\n",(0,s.jsxs)(n.p,{children:["When it says ",(0,s.jsx)(n.code,{children:"Published"})," or ",(0,s.jsx)(n.code,{children:"Completed"}),", that means the job is done, and we can get the results."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Job information"}),": You can find out more information about your job by using ",(0,s.jsx)(n.code,{children:"bacalhau describe"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"%%bash\nbacalhau describe ${JOB_ID}\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Job download"}),": You can download your job results directly by using ",(0,s.jsx)(n.code,{children:"bacalhau get"}),". Alternatively, you can choose to create a directory to store your results. In the command below, we created a directory and downloaded our job output to be stored in that directory."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"%%bash\nmkdir -p ./results # Temporary directory to store the results\nbacalhau get --output-dir ./results ${JOB_ID} # Download the results\n"})}),"\n",(0,s.jsx)(n.p,{children:"After the download has finished you should see the following contents in the results directory."}),"\n",(0,s.jsx)(n.h2,{id:"viewing-your-job-output",children:"Viewing your Job Output"}),"\n",(0,s.jsx)(n.p,{children:"To view the file, run the following command:"}),"\n",(0,s.jsx)(n.h3,{id:"display-the-videos",children:"Display the videos"}),"\n",(0,s.jsxs)(n.p,{children:["To view the videos, we will use ",(0,s.jsx)(n.strong,{children:"glob"})," to return all file paths that match a specific pattern."]}),"\n",(0,s.jsx)("video",{src:i(4388).Z,controls:!0,children:(0,s.jsxs)(n.p,{children:["Your browser does not support the ",(0,s.jsx)("code",{children:"video"})," element."]})}),"\n",(0,s.jsx)("video",{src:i(2601).Z,controls:!0,children:(0,s.jsxs)(n.p,{children:["Your browser does not support the ",(0,s.jsx)("code",{children:"video"})," element."]})}),"\n",(0,s.jsx)("video",{src:i(3074).Z,controls:!0,children:(0,s.jsxs)(n.p,{children:["Your browser does not support the ",(0,s.jsx)("code",{children:"video"})," element."]})}),"\n",(0,s.jsx)(n.h2,{id:"need-support",children:"Need Support?"}),"\n",(0,s.jsxs)(n.p,{children:["For questions, and feedback, please reach out in our ",(0,s.jsx)(n.a,{href:"https://github.com/filecoin-project/bacalhau/discussions",children:"forum"})]})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},4388:(e,n,i)=>{i.d(n,{Z:()=>s});const s=i.p+"assets/medias/scaled_Bird_flying_over_the_lake-f27930f63d99eb1d79eb6b9bfb26296d.mp4"},2601:(e,n,i)=>{i.d(n,{Z:()=>s});const s=i.p+"assets/medias/scaled_Calm_waves_on_a_rocky_sea_gulf-17102357190cb2a7f71591fc82f9b687.mp4"},3074:(e,n,i)=>{i.d(n,{Z:()=>s});const s=i.p+"assets/medias/scaled_Prominent_Late_Gothic_styled_architecture-44a4f8a1d7fd0eb1219ce2c3e0659799.mp4"},1151:(e,n,i)=>{i.d(n,{Z:()=>r,a:()=>o});var s=i(7294);const t={},a=s.createContext(t);function o(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);