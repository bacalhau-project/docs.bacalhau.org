"use strict";(self.webpackChunkbacalhau_docs=self.webpackChunkbacalhau_docs||[]).push([[1253],{7117:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var o=t(5893),s=t(1151);const i={sidebar_label:"Job Selection Policy",sidebar_position:140},r="Job selection policy",c={id:"running-node/job-selection",title:"Job selection policy",description:"When running a node, you can choose which jobs you want to run by using",source:"@site/docs/running-node/job-selection.md",sourceDirName:"running-node",slug:"/running-node/job-selection",permalink:"/running-node/job-selection",draft:!1,unlisted:!1,editUrl:"https://github.com/bacalhau-project/docs.bacalhau.org/blob/main/docs/running-node/job-selection.md",tags:[],version:"current",lastUpdatedAt:1700058439,formattedLastUpdatedAt:"Nov 15, 2023",sidebarPosition:140,frontMatter:{sidebar_label:"Job Selection Policy",sidebar_position:140},sidebar:"documentationSidebar",previous:{title:"Storage Providers",permalink:"/running-node/storage-providers"},next:{title:"Resource Limits",permalink:"/running-node/resource-limits"}},d={},l=[{value:"Job selection probes",id:"job-selection-probes",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"job-selection-policy",children:"Job selection policy"}),"\n",(0,o.jsx)(n.p,{children:"When running a node, you can choose which jobs you want to run by using\nconfiguration options, environment variables or flags to specify a job selection\npolicy."}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Config property"}),(0,o.jsxs)(n.th,{children:[(0,o.jsx)(n.code,{children:"serve"})," flag"]}),(0,o.jsx)(n.th,{children:"Default value"}),(0,o.jsx)(n.th,{children:"Meaning"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Node.Compute.JobSelection.Locality"}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"--job-selection-data-locality"})}),(0,o.jsx)(n.td,{children:"Anywhere"}),(0,o.jsx)(n.td,{children:'Only accept jobs that reference data we have locally ("local") or anywhere ("anywhere").'})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Node.Compute.JobSelection.ProbeExec"}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"--job-selection-probe-exec"})}),(0,o.jsx)(n.td,{children:"unused"}),(0,o.jsx)(n.td,{children:"Use the result of an external program to decide if we should take on the job."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Node.Compute.JobSelection.ProbeHttp"}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"--job-selection-probe-http"})}),(0,o.jsx)(n.td,{children:"unused"}),(0,o.jsx)(n.td,{children:"Use the result of a HTTP POST to decide if we should take on the job."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Node.Compute.JobSelection.RejectStatelessJobs"}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"--job-selection-reject-stateless"})}),(0,o.jsx)(n.td,{children:"False"}),(0,o.jsxs)(n.td,{children:["Reject jobs that don't specify any ",(0,o.jsx)(n.a,{href:"/data-ingestion/",children:"input data"}),"."]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Node.Compute.JobSelection.AcceptNetworkedJobs"}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"--job-selection-accept-networked"})}),(0,o.jsx)(n.td,{children:"False"}),(0,o.jsxs)(n.td,{children:["Accept jobs that require ",(0,o.jsx)(n.a,{href:"/next-steps/networking",children:"network connections"}),"."]})]})]})]}),"\n",(0,o.jsx)(n.h2,{id:"job-selection-probes",children:"Job selection probes"}),"\n",(0,o.jsxs)(n.p,{children:["If you want more control over making the decision to take on jobs, you can use the ",(0,o.jsx)(n.code,{children:"--job-selection-probe-exec"})," and ",(0,o.jsx)(n.code,{children:"--job-selection-probe-http"})," flags."]}),"\n",(0,o.jsx)(n.p,{children:"These are external programs that are passed the following data structure so that they can make a decision about whether or not to take on a job:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "node_id": "XXX",\n  "job_id": "XXX",\n  "spec": {\n    "engine": "docker",\n    "verifier": "ipfs",\n    "job_spec_vm": {\n      "image": "ubuntu:latest",\n      "entrypoint": ["cat", "/file.txt"]\n    },\n    "inputs": [{\n      "engine": "ipfs",\n      "cid": "XXX",\n      "path": "/file.txt"\n    }]\n  }\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"exec"})," probe is a script to run that will be given the job data on ",(0,o.jsx)(n.code,{children:"stdin"}),", and must exit with status code 0 if the job should be run."]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"http"})," probe is a URL to POST the job data to. The job will be rejected if\nthe HTTP request returns a non-positive status code (e.g. >= 400)."]}),"\n",(0,o.jsxs)(n.p,{children:["If the HTTP response is a JSON blob, it should match the ",(0,o.jsx)(n.a,{href:"https://github.com/bacalhau-project/bacalhau/blob/885d53e93b01fb343294d7ddbdbffe89918db800/pkg/bidstrategy/type.go#L18-L22",children:"following\nschema"}),"\nand will be used to respond to the bid directly:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "$schema": "http://json-schema.org/draft-04/schema#",\n  "type": "object",\n  "properties": {\n    "shouldBid": {\n      "description": "If the job should be accepted",\n      "type": "boolean"\n    },\n    "shouldWait": {\n      "description": "If the node should wait for an async response that will come later. `shouldBid` will be ignored",\n      "type": "boolean",\n      "default": false,\n    },\n    "reason": {\n      "description": "Human-readable string explaining why the job should be accepted or rejected, or why the wait is required",\n      "type": "string"\n    }\n  },\n  "required": [\n    "shouldBid",\n    "reason"\n  ]\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"For example, the following response will reject the job:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "shouldBid": false,\n  "reason": "The job did not pass this specific validation: ...",\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"If the HTTP response is not a JSON blob, the content is ignored and any non-error status code will accept the job."})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>r});var o=t(7294);const s={},i=o.createContext(s);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);