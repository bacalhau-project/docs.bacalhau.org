"use strict";(self.webpackChunkbacalhau_docs=self.webpackChunkbacalhau_docs||[]).push([[8530],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>k});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var o=n.createContext({}),m=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},s=function(e){var t=m(e.components);return n.createElement(o.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=m(a),d=i,k=u["".concat(o,".").concat(d)]||u[d]||c[d]||r;return a?n.createElement(k,l(l({ref:t},s),{},{components:a})):n.createElement(k,l({ref:t},s))}));function k(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=d;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p[u]="string"==typeof e?e:i,l[1]=p;for(var m=2;m<r;m++)l[m]=a[m];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},1993:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>p,toc:()=>m});var n=a(7462),i=(a(7294),a(3905));const r={sidebar_label:"executions"},l="Command: job executions",p={unversionedId:"references/cli/job/executions/index",id:"references/cli/job/executions/index",title:"Command: job executions",description:"Description",source:"@site/docs/references/cli/job/executions/index.md",sourceDirName:"references/cli/job/executions",slug:"/references/cli/job/executions/",permalink:"/references/cli/job/executions/",draft:!1,editUrl:"https://github.com/bacalhau-project/docs.bacalhau.org/blob/main/docs/references/cli/job/executions/index.md",tags:[],version:"current",lastUpdatedAt:1697635948,formattedLastUpdatedAt:"Oct 18, 2023",frontMatter:{sidebar_label:"executions"},sidebar:"documentationSidebar",previous:{title:"describe",permalink:"/references/cli/job/describe/"},next:{title:"history",permalink:"/references/cli/job/history/"}},o={},m=[{value:"Description",id:"description",level:2},{value:"Usage",id:"usage",level:2},{value:"Flags",id:"flags",level:2},{value:"Global Flags",id:"global-flags",level:2},{value:"Examples",id:"examples",level:2}],s={toc:m},u="wrapper";function c(e){let{components:t,...a}=e;return(0,i.kt)(u,(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"command-job-executions"},"Command: ",(0,i.kt)("inlineCode",{parentName:"h1"},"job executions")),(0,i.kt)("h2",{id:"description"},"Description"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"bacalhau job executions")," command retrieves a list of executions for a specific job based on its ID. This can be essential when tracking the various runs and their respective states for a particular job."),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"bacalhau job executions [id] [flags]\n")),(0,i.kt)("h2",{id:"flags"},"Flags"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"-h"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"--help"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Description: Display help for the ",(0,i.kt)("inlineCode",{parentName:"li"},"executions")," command."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--hide-header"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Description: Do not print the column headers when displaying the results."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--limit uint32"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Description: Restricts the number of results returned."),(0,i.kt)("li",{parentName:"ul"},"Default: ",(0,i.kt)("inlineCode",{parentName:"li"},"20")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--next-token string"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Description: Uses the specified token for pagination. Useful for fetching the next set of results."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--no-style"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Description: Removes all styling from the table output, displaying raw data."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--order-by string"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Description: Orders results based on a specific field. Valid fields are: ",(0,i.kt)("inlineCode",{parentName:"li"},"modify_time"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"create_time"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"id"),", and ",(0,i.kt)("inlineCode",{parentName:"li"},"state"),"."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--order-reversed"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Description: Reverses the order of the results. Useful in conjunction with ",(0,i.kt)("inlineCode",{parentName:"li"},"--order-by"),"."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--output format"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Description: Specifies the desired output format for the command. Supported values are ",(0,i.kt)("inlineCode",{parentName:"li"},"table"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"csv"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"json"),", and ",(0,i.kt)("inlineCode",{parentName:"li"},"yaml"),"."),(0,i.kt)("li",{parentName:"ul"},"Default: ",(0,i.kt)("inlineCode",{parentName:"li"},"table")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--pretty"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Description: Pretty prints the output. This option is applicable only to ",(0,i.kt)("inlineCode",{parentName:"li"},"json")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"yaml")," output formats."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--wide"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Description: Prints full values in the table results without truncating any information.")))),(0,i.kt)("h2",{id:"global-flags"},"Global Flags"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--api-host string"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Description: Specifies the host for the client and server to communicate through via REST. If the ",(0,i.kt)("inlineCode",{parentName:"li"},"BACALHAU_API_HOST")," environment variable is set, this flag will be ignored."),(0,i.kt)("li",{parentName:"ul"},"Default: ",(0,i.kt)("inlineCode",{parentName:"li"},"bootstrap.production.bacalhau.org")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--api-port int"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Description: Determines the port for the client and server to communicate on using REST. If the ",(0,i.kt)("inlineCode",{parentName:"li"},"BACALHAU_API_PORT")," environment variable is set, this flag will be ignored."),(0,i.kt)("li",{parentName:"ul"},"Default: ",(0,i.kt)("inlineCode",{parentName:"li"},"1234")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--log-mode logging-mode"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Description: Specifies the desired log format. Supported values include ",(0,i.kt)("inlineCode",{parentName:"li"},"default"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"station"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"json"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"combined"),", and ",(0,i.kt)("inlineCode",{parentName:"li"},"event"),"."),(0,i.kt)("li",{parentName:"ul"},"Default: ",(0,i.kt)("inlineCode",{parentName:"li"},"default")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--repo string"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Description: Defines the path to the bacalhau repository."),(0,i.kt)("li",{parentName:"ul"},"Default: ",(0,i.kt)("inlineCode",{parentName:"li"},"$HOME/.bacalhau"))))),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"List executions for a specific Job"),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"bacalhau job executions j-6f2bf0ea-ebcd-4490-899a-9de9d8d95881\n")),(0,i.kt)("p",{parentName:"li"},"Expected output:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"CREATED   MODIFIED  ID          NODE ID   REV.  COMPUTE    DESIRED  COMMENT\n                                                STATE      STATE\n16:46:03  16:46:04  e-99362435  QmTSJgdN  6     Completed  Stopped\n16:46:03  16:46:04  e-75dd20bb  QmXRdLru  6     Completed  Stopped\n16:46:03  16:46:04  e-03870df5  QmVXwmdZ  6     Completed  Stopped\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Order executions by state for a specific job"),":"),(0,i.kt)("p",{parentName:"li"},"Execute the command:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"bacalhau job executions j-6f2bf0ea-ebcd-4490-899a-9de9d8d95881 --order-by state\n")),(0,i.kt)("p",{parentName:"li"},"Expected output:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"CREATED   MODIFIED  ID          NODE ID   REV.  COMPUTE    DESIRED  COMMENT\n                                                STATE      STATE\n16:46:03  16:46:04  e-03870df5  QmVXwmdZ  6     Completed  Stopped\n16:46:03  16:46:04  e-75dd20bb  QmXRdLru  6     Completed  Stopped\n16:46:03  16:46:04  e-99362435  QmTSJgdN  6     Completed  Stopped\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"List executions with YAML output"),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"bacalhau job executions j-6f2bf0ea-ebcd-4490-899a-9de9d8d95881 --output yaml\n")),(0,i.kt)("p",{parentName:"li"},"Expected output:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"... [The YAML formatted output] ...\n")))))}c.isMDXComponent=!0}}]);